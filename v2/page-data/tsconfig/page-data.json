{"componentChunkName":"component---src-templates-tsconfig-reference-tsx","path":"/tsconfig","result":{"data":{"markdownRemark":{"id":"a064680b-367b-52b6-83c8-972dd8a9900e","html":"<h2 id='Project_Files_0'><a href='#Project_Files_0'>#</a> File Inclusion</h2>\n<p>These settings help you ensure that TypeScript picks up the right files.</p>\n<section class='compiler-option'>\n<h3 id='files'><a aria-label=\"Link to the compiler option:files\" title=\"Link to the compiler option:files\" href='#files'>#</a> Files - <code>files</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specifies an allowlist of files to include in the program. An error occurs if any of the files can’t be found.</p>\n<pre><code class=\"language-tsconfig\">{\n    \"compilerOptions\": {},\n    \"files\": [\n        \"core.ts\",\n        \"sys.ts\",\n        \"types.ts\",\n        \"scanner.ts\",\n        \"parser.ts\",\n        \"utilities.ts\",\n        \"binder.ts\",\n        \"checker.ts\",\n        \"emitter.ts\",\n        \"program.ts\",\n        \"commandLineParser.ts\",\n        \"tsc.ts\",\n        \"diagnosticInformationMap.generated.ts\"\n    ]\n}\n</code></pre>\n<p>This is useful when you only have a small number of files and don’t need to use a glob to reference many files.\nIf you need that then use <a href=\"#include\"><code>include</code></a>.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>files<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='include'><a aria-label=\"Link to the compiler option:include\" title=\"Link to the compiler option:include\" href='#include'>#</a> Include - <code>include</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specifies an array of filenames or patterns to include in the program.\nThese filenames are resolved relative to the directory containing the <code>tsconfig.json</code> file.</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"include\"</span><span  style=\"color: #000000\">: [</span><span  style=\"color: #A31515\">\"src/**\"</span><span  style=\"color: #000000\">, </span><span  style=\"color: #A31515\">\"tests/**\"</span><span  style=\"color: #000000\">]</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>Which would include:</p>\n<!-- TODO: #135\n```diff\n  .\n- ├── scripts\n- │   ├── lint.ts\n- │   ├── update_deps.ts\n- │   └── utils.ts\n+ ├── src\n+ │   ├── client\n+ │   │    ├── index.ts\n+ │   │    └── utils.ts\n+ │   ├── server\n+ │   │    └── index.ts\n+ ├── tests\n+ │   ├── app.test.ts\n+ │   ├── utils.ts\n+ │   └── tests.d.ts\n- ├── package.json\n- ├── tsconfig.json\n- └── yarn.lock\n``` -->\n<pre><code>.\n├── scripts                ⨯\n│   ├── lint.ts            ⨯\n│   ├── update_deps.ts     ⨯\n│   └── utils.ts           ⨯\n├── src                    ✓\n│   ├── client             ✓\n│   │    ├── index.ts      ✓\n│   │    └── utils.ts      ✓\n│   ├── server             ✓\n│   │    └── index.ts      ✓\n├── tests                  ✓\n│   ├── app.test.ts        ✓\n│   ├── utils.ts           ✓\n│   └── tests.d.ts         ✓\n├── package.json\n├── tsconfig.json\n└── yarn.lock\n</code></pre>\n<p><code>include</code> and <code>exclude</code> support wildcard characters to make glob patterns:</p>\n<ul>\n<li><code>*</code> matches zero or more characters (excluding directory separators)</li>\n<li><code>?</code> matches any one character (excluding directory separators)</li>\n<li><code>**/</code> recursively matches any subdirectory</li>\n</ul>\n<p>If a glob pattern doesn’t include a file extension, then only files with supported extensions are included (e.g. <code>.ts</code>, <code>.tsx</code>, and <code>.d.ts</code> by default, with <code>.js</code> and <code>.jsx</code> if <code>allowJs</code> is set to true).</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>include<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='exclude'><a aria-label=\"Link to the compiler option:exclude\" title=\"Link to the compiler option:exclude\" href='#exclude'>#</a> Exclude - <code>exclude</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specifies an array of filenames or patterns that should be skipped when resolving <code>include</code>.</p>\n<p><strong>Important</strong>: <code>exclude</code> <em>only</em> changes which files are included as a result of the <code>include</code> setting.\nA file specified by <code>exclude</code> can still become part of your codebase due to an <code>import</code> statement in your code, a <code>types</code> inclusion, a <code>/// &#x3C;reference</code> directive, or being specified in the <code>files</code> list.</p>\n<p>It is not a mechanism that <strong>prevents</strong> a file from being included in the codebase - it simply changes what the <code>include</code> setting finds.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>exclude<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extends'><a aria-label=\"Link to the compiler option:extends\" title=\"Link to the compiler option:extends\" href='#extends'>#</a> Extends - <code>extends</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The value of <code>extends</code> is a string which contains a path to another configuration file to inherit from.\nThe path may use Node.js style resolution.</p>\n<p>The configuration from the base file are loaded first, then overridden by those in the inheriting config file. All relative paths found in the configuration file will be resolved relative to the configuration file they originated in.</p>\n<p>It’s worth noting that <code>files</code>, <code>include</code> and <code>exclude</code> from the inheriting config file <em>overwrite</em> those from the\nbase config file, and that circularity between configuration files is not allowed.</p>\n<h5 id=\"example\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<p><code>configs/base.json</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"compilerOptions\"</span><span  style=\"color: #000000\">: {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"noImplicitAny\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\">,</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"strictNullChecks\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #0000FF\">true</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p><code>tsconfig.json</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"extends\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #A31515\">\"./configs/base\"</span><span  style=\"color: #000000\">,</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"files\"</span><span  style=\"color: #000000\">: [</span><span  style=\"color: #A31515\">\"main.ts\"</span><span  style=\"color: #000000\">, </span><span  style=\"color: #A31515\">\"supplemental.ts\"</span><span  style=\"color: #000000\">]</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p><code>tsconfig.nostrictnull.json</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"extends\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #A31515\">\"./tsconfig\"</span><span  style=\"color: #000000\">,</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"compilerOptions\"</span><span  style=\"color: #000000\">: {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"strictNullChecks\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #0000FF\">false</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>extends<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='typeAcquisition'><a aria-label=\"Link to the compiler option:typeAcquisition\" title=\"Link to the compiler option:typeAcquisition\" href='#typeAcquisition'>#</a> Type Acquisition - <code>typeAcquisition</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When you have a JavaScript project in your editor, TypeScript will provide types for your node modules automatically using the DefinitelyTyped set of <code>@types</code> definitions.\nThis is called automatic type acquisition, and you can customize it using the <code>typeAcquisition</code> object in your configuration.</p>\n<p>If you would like to disable this for your project, create a <code>jsconfig.json</code> in the root of your project:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"typeAcquisition\"</span><span  style=\"color: #000000\">: {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"enable\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #0000FF\">false</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>If you have a specific module which should be included (but isn’t in node modules):</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"typeAcquisition\"</span><span  style=\"color: #000000\">: {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"include\"</span><span  style=\"color: #000000\">: [</span><span  style=\"color: #A31515\">\"jest\"</span><span  style=\"color: #000000\">]</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>If a module should not be automatically acquired, for example the library is available in your node modules but your team has agreed to not use it:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"typeAcquisition\"</span><span  style=\"color: #000000\">: {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"exclude\"</span><span  style=\"color: #000000\">: [</span><span  style=\"color: #A31515\">\"jquery\"</span><span  style=\"color: #000000\">]</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>typeAcquisition<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='references'><a aria-label=\"Link to the compiler option:references\" title=\"Link to the compiler option:references\" href='#references'>#</a> References - <code>references</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Project references are a way to structure your TypeScript programs into smaller pieces.\nUsing Project References can greatly improve build and editor interaction times, enforce logical separation between components, and organize your code in new and better ways.</p>\n<p>You can read more about how references works in the <a href=\"/docs/handbook/project-references.html\">Project References</a> section of the handbook</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>references<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<h2 id='Basic_Options_6172'><a href='#Basic_Options_6172'>#</a> Project Options</h2>\n<p>These settings are used to define the runtime expectations of your project, how and where you want the JavaScript to be emitted and the level of integration you want with existing JavaScript code.</p>\n<section class='compiler-option'>\n<h3 id='incremental'><a aria-label=\"Link to the compiler option:incremental\" title=\"Link to the compiler option:incremental\" href='#incremental'>#</a> Incremental - <code>incremental</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Tells TypeScript to save information about the project graph from the last compilation to files stored on disk. This\ncreates a series of <code>.tsbuildinfo</code> files in the same folder as your compilation output. They are not used by your\nJavaScript at runtime and can be safely deleted. You can read more about the flag in the <a href=\"/docs/handbook/release-notes/typescript-3-4.html#faster-subsequent-builds-with-the---incremental-flag\">3.4 release notes</a></p>\n<p>To control which folders you want to the files to be built to, use the config option <a href=\"#tsBuildInfoFile\"><code>tsBuildInfoFile</code></a>.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>incremental<td/></tr>\n<tr><td>Default</td><td>`true`<td/></tr>\n<tr><td>Related</td><td>[`composite`](#composite), [`tsBuildInfoFile`](#tsBuildInfoFile)<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-3_4.html\">3.4</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='target'><a aria-label=\"Link to the compiler option:target\" title=\"Link to the compiler option:target\" href='#target'>#</a> Target - <code>target</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>All modern browsers support all ES6 features, so <code>ES6</code> is a good choice.\nYou might choose to set a lower target if your code is deployed to older environments, or a higher target if your code only runs on newer environments.</p>\n<p>The <code>target</code> setting changes which JS features are downleveled or left intact.\nFor example, an arrow function <code>() => this</code> will be turned into an equivalent <code>function</code> expression if <code>target</code> is ES5 or lower.</p>\n<p>Changing <code>target</code> also changes the default value of <a href=\"#lib\"><code>lib</code></a>.\nYou may “mix and match” <code>target</code> and <code>lib</code> settings as desired, but you could just set target for convenience.</p>\n<p>If you are working just with Node.js here are some recommended <code>target</code> options based off your version:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Supported Target</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Node 8</td>\n<td><code>ES2017</code></td>\n</tr>\n<tr>\n<td>Node 10</td>\n<td><code>ES2018</code></td>\n</tr>\n<tr>\n<td>Node 12</td>\n<td><code>ES2019</code></td>\n</tr>\n</tbody>\n</table>\n<p>These are based on <a href=\"https://node.green\">node.green</a>’s database of support.</p>\n<p>The value <code>ESNext</code> refers to whatever the highest version TypeScript supports at the time is.\nThis setting should be used with caution, since it doesn’t mean the same thing between TypeScript versions and can make upgrades less predictable.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>target<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Allowed</td><td>`ES3` (default), `ES5`, `ES6`/`ES2015` (synonomous), `ES7`/`ES2016`, `ES2017`, `ES2018`, `ES2019`, `ESNext`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-1_0.html\">1.0</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='module'><a aria-label=\"Link to the compiler option:module\" title=\"Link to the compiler option:module\" href='#module'>#</a> Module - <code>module</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Sets the module system for the program. See the [[Modules]] chapter for more information.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>module<td/></tr>\n<tr><td>Allowed</td><td>`CommonJS` (default if `target` is `ES3` or `ES5`), `ES6`/`ES2015` (synonymous, default for `target` `ES6` and higher), `None`, `UMD`, `AMD`, `System`, `ESNext`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-1_0.html\">1.0</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='lib'><a aria-label=\"Link to the compiler option:lib\" title=\"Link to the compiler option:lib\" href='#lib'>#</a> Lib - <code>lib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript includes a default set of type definitions for built-in JS APIs (like <code>Math</code>), as well as type definitions for things found in browser environments (like <code>document</code>).\nTypeScript also includes APIs for newer JS features matching the <code>target</code> you specify; for example the definition for <code>Map</code> is available if <code>target</code> is <code>ES6</code> or newer.</p>\n<p>You may want to change these for a few reasons:</p>\n<ul>\n<li>Your program doesn’t run in a browser, so you don’t want the <code>\"dom\"</code> type definitions</li>\n<li>Your runtime platform provides certain JavaScript API objects (maybe through polyfills), but doesn’t yet support the full syntax of a given ECMAScript version</li>\n<li>You have polyfills or native implementations for some, but not all, of a higher level ECMAScript version</li>\n</ul>\n<h3 id=\"high-level-libraries\"><a href=\"#high-level-libraries\" aria-label=\"high level libraries permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Level libraries</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Contents</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ES5</code></td>\n<td>Core definitions for all ES3 and ES5 functionality</td>\n</tr>\n<tr>\n<td><code>ES2015</code></td>\n<td>Additional APIs available in ES2015 (also known as ES6) - <code>array.find</code>, <code>Promise</code>, <code>Proxy</code>, <code>Symbol</code>, <code>Map</code>, <code>Set</code>, <code>Reflect</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES6</code></td>\n<td>Alias for “ES2015”</td>\n</tr>\n<tr>\n<td><code>ES2016</code></td>\n<td>Additional APIs available in ES2016 - <code>array.include</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES7</code></td>\n<td>Alias for “ES2016”</td>\n</tr>\n<tr>\n<td><code>ES2017</code></td>\n<td>Additional APIs available in ES2017 - <code>Object.entries</code>, <code>Object.values</code>, <code>Atomics</code>, <code>SharedArrayBuffer</code>, <code>date.formatToParts</code>, typed arrays, etc.</td>\n</tr>\n<tr>\n<td><code>ES2018</code></td>\n<td>Additional APIs available in ES2018 - <code>async</code> iterables, <code>promise.finally</code>, <code>Intl.PluralRules</code>, <code>rexexp.groups</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES2019</code></td>\n<td>Additional APIs available in ES2019 - <code>array.flat</code>, <code>array.flatMap</code>, <code>Object.fromEntries</code>, <code>string.trimStart</code>, <code>string.trimEnd</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES2020</code></td>\n<td>Additional APIs available in ES2020 - <code>string.matchAll</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ESNext</code></td>\n<td>Additional APIs available in ESNext - This changes as the JavaScript specification evolves</td>\n</tr>\n<tr>\n<td><code>DOM</code></td>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/DOM\">DOM</a> definitions - <code>window</code>, <code>document</code>, etc.</td>\n</tr>\n<tr>\n<td><code>WebWorker</code></td>\n<td>APIs available in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">WebWorker</a> contexts</td>\n</tr>\n<tr>\n<td><code>ScriptHost</code></td>\n<td>APIs for the <a href=\"https://en.wikipedia.org/wiki/Windows_Script_Host\">Windows Script Hosting System</a></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"individual-library-components\"><a href=\"#individual-library-components\" aria-label=\"individual library components permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Individual library components</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DOM.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Core</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Collection</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Generator</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Proxy</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Reflect</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol.WellKnown</code></td>\n</tr>\n<tr>\n<td><code>ES2016.Array.Include</code></td>\n</tr>\n<tr>\n<td><code>ES2017.object</code></td>\n</tr>\n<tr>\n<td><code>ES2017.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2017.SharedMemory</code></td>\n</tr>\n<tr>\n<td><code>ES2017.String</code></td>\n</tr>\n<tr>\n<td><code>ES2017.TypedArrays</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2018.RegExp</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Array</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Full</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Object</code></td>\n</tr>\n<tr>\n<td><code>ES2019.String</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Full</code></td>\n</tr>\n<tr>\n<td><code>ES2020.String</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Symbol.wellknown</code></td>\n</tr>\n<tr>\n<td><code>ESNext.AsyncIterable</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Array</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Intl</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Symbol</code></td>\n</tr>\n</tbody>\n</table>\n<p>This list may be out of date, you can see the full list in the <a href=\"https://github.com/microsoft/TypeScript/tree/master/lib\">TypeScript source code</a>.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>lib<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_0.html\">2.0</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowJs'><a aria-label=\"Link to the compiler option:allowJs\" title=\"Link to the compiler option:allowJs\" href='#allowJs'>#</a> Allow JS - <code>allowJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Allow JavaScript files to be imported inside your project, instead of just <code>.ts</code> and <code>.tsx</code> files. For example, this JS file:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #008000\">// @filename: card.js</span>\n<span  style=\"color: #0000FF\">export</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> defaultCardDeck = </span><span  style=\"color: #A31515\">\"Heart\"</span><span  style=\"color: #000000\">;</span></code></div></pre>\n<p>When imported into a TypeScript file will raise an error:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code>\n<span  style=\"color: #008000\">// @filename: index.ts</span>\n<span  style=\"color: #0000FF\">import</span><span  style=\"color: #000000\"> { defaultCardDeck } </span><span  style=\"color: #0000FF\">from</span><span  style=\"color: #000000\"> </span><span  style=\"color: #A31515\">\"./card\"</span><span  style=\"color: #000000\">;</span>\n\n<span  style=\"color: #000000\">console.log(defaultCardDeck);</span></code></div></pre>\n<p>Imports fine with <code>allowJs</code> enabled:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code>\n<span  style=\"color: #008000\">// @filename: index.ts</span>\n<span  style=\"color: #0000FF\">import</span><span  style=\"color: #000000\"> { defaultCardDeck } </span><span  style=\"color: #0000FF\">from</span><span  style=\"color: #000000\"> </span><span  style=\"color: #A31515\">\"./card\"</span><span  style=\"color: #000000\">;</span>\n\n<span  style=\"color: #000000\">console.log(defaultCardDeck);</span></code></div></pre>\n<p>This flag can be used as a way to incrementally add TypeScript files into JS projects.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>allowJs<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-1_8.html\">1.8</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='checkJs'><a aria-label=\"Link to the compiler option:checkJs\" title=\"Link to the compiler option:checkJs\" href='#checkJs'>#</a> Check JS - <code>checkJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Works in tandem with <code>allowJs</code>. When <code>checkJs</code> is enabled then errors are reported in JavaScript files. This is\nthe equivalent of including <code>// @ts-check</code> at the top of all JavaScript files which are included in your project.</p>\n<p>For example, this is incorrect JavaScript according to the <code>parseFloat</code> type definition which comes with TypeScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #0000FF\">export</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> pi = parseFloat(</span><span  style=\"color: #09835A\">3.124</span><span  style=\"color: #000000\">); </span><span  style=\"color: #008000\">// parseFloat only takes a string</span></code></div></pre>\n<p>When imported into a TypeScript module</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">import</span><span  style=\"color: #000000\"> { pi } </span><span  style=\"color: #0000FF\">from</span><span  style=\"color: #000000\"> </span><span  style=\"color: #A31515\">\"./def\"</span><span  style=\"color: #000000\">;</span>\n\n<span  style=\"color: #000000\">console.log(pi);</span></code></div></pre>\n<p>You will not get any errors. However, if you turn on <code>checkJs</code> then you will get error messages from the JavaScript file.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #000000\">def.js(</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">,</span><span  style=\"color: #09835A\">30</span><span  style=\"color: #000000\">): error TS2345: Argument </span><span  style=\"color: #0000FF\">of</span><span  style=\"color: #000000\"> type </span><span  style=\"color: #A31515\">'3.124'</span><span  style=\"color: #000000\"> is not assignable to parameter </span><span  style=\"color: #0000FF\">of</span><span  style=\"color: #000000\"> type </span><span  style=\"color: #A31515\">'string'</span><span  style=\"color: #000000\">.</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>checkJs<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsx'><a aria-label=\"Link to the compiler option:jsx\" title=\"Link to the compiler option:jsx\" href='#jsx'>#</a> JSX - <code>jsx</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Controls how JSX constructs are emitted in JavaScript files.\nThis only affects output of JS files that started in <code>.tsx</code> files.</p>\n<ul>\n<li><code>preserve</code>: Emit <code>.jsx</code> files with the JSX unchanged</li>\n<li><code>react</code>: Emit <code>.js</code> files with JSX changed to the equivalent <code>React.createElement</code> calls</li>\n<li><code>react-native</code>: Emit <code>.js</code> files with the JSX unchanged</li>\n</ul>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>jsx<td/></tr>\n<tr><td>Default</td><td>`\"preserve\"`<td/></tr>\n<tr><td>Allowed</td><td>`react` (default), `react-native`, `preserve`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_2.html\">2.2</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declaration'><a aria-label=\"Link to the compiler option:declaration\" title=\"Link to the compiler option:declaration\" href='#declaration'>#</a> Declaration - <code>declaration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Generate <code>d.ts</code> files for every TypeScript or JavaScript file inside your project.\nThese <code>d.ts</code> files are type definition files which describe the external API of your module.\nWith `d.ts files, tools like TypeScript can provide intellisense and accurate types for un-typed code.</p>\n<p>When <code>declaration</code> is set to <code>true</code>, running the compiler with this TypeScript code:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">export</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> helloWorld = </span><span  style=\"color: #A31515\">\"hi\"</span><span  style=\"color: #000000\">;</span></code></div></pre>\n<p>Will generate a <code>index.js</code> file like this:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #0000FF\">export</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> helloWorld = </span><span  style=\"color: #A31515\">\"hi\"</span><span  style=\"color: #000000\">;</span></code></div></pre>\n<p>With a corresponding this <code>helloWorld.d.ts</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #008000\">// @showEmittedFile: index.d.ts</span>\n<span  style=\"color: #008000\">// @showEmit</span>\n<span  style=\"color: #008000\">// @declaration</span>\n<span  style=\"color: #0000FF\">export</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">declare</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> helloWorld = </span><span  style=\"color: #A31515\">\"hi\"</span><span  style=\"color: #000000\">;</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>declaration<td/></tr>\n<tr><td>Default</td><td>True when TS<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-1_0.html\">1.0</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationMap'><a aria-label=\"Link to the compiler option:declarationMap\" title=\"Link to the compiler option:declarationMap\" href='#declarationMap'>#</a> Declaration Map - <code>declarationMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Generates a source map for <code>.d.ts</code> files which map back to the original <code>.ts</code> source file.\nThis will allow editors such as VS Code to go to the original <code>.ts</code> file when using features like <em>Go to Definition</em>.</p>\n<p>You should strongly consider turning this on if you’re using project references.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>declarationMap<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_9.html\">2.9</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceMap'><a aria-label=\"Link to the compiler option:sourceMap\" title=\"Link to the compiler option:sourceMap\" href='#sourceMap'>#</a> Source Map - <code>sourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Enables the generation of <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_a_source_map\">sourcemap files</a>.\nThese files allow debuggers and other tools to display the original TypeScript source code when actually working with the emitted JavaScript files.\nSource map files are emitted as <code>.js.map</code> (or <code>.jsx.map</code>) files next to the corresponding <code>.js</code> output file.</p>\n<p>The <code>.js</code> files will in turn contain a sourcemap comment to indicate to tools where the files are, for example:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #008000\">// helloWorld.ts</span>\n<span  style=\"color: #0000FF\">export</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">declare</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> helloWorld = </span><span  style=\"color: #A31515\">\"hi\"</span><span  style=\"color: #000000\">;</span></code></div></pre>\n<p>Compiling with <code>sourceMap</code> as <code>true</code> creates this JavaScript file:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #008000\">// helloWorld.js</span>\n<span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">Object.defineProperty(exports, </span><span  style=\"color: #A31515\">\"__esModule\"</span><span  style=\"color: #000000\">, { value: </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\"> });</span>\n<span  style=\"color: #000000\">exports.helloWorld = </span><span  style=\"color: #A31515\">\"hi\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #008000\">//# sourceMappingURL=// helloWorld.js.map</span></code></div></pre>\n<p>And this also generates this json map:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span  style=\"color: #008000\">// helloWorld.js.map</span>\n<span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"version\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #09835A\">3</span><span  style=\"color: #000000\">,</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"file\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #A31515\">\"ex.js\"</span><span  style=\"color: #000000\">,</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"sourceRoot\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #A31515\">\"\"</span><span  style=\"color: #000000\">,</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"sources\"</span><span  style=\"color: #000000\">: [</span><span  style=\"color: #A31515\">\"../ex.ts\"</span><span  style=\"color: #000000\">],</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"names\"</span><span  style=\"color: #000000\">: [],</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"mappings\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #A31515\">\";;AAAa,QAAA,UAAU,GAAG,IAAI,CAAA\"</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>sourceMap<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outFile'><a aria-label=\"Link to the compiler option:outFile\" title=\"Link to the compiler option:outFile\" href='#outFile'>#</a> Out File - <code>outFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>If specified, all <em>global</em> (non-module) files will be concatenated into the single output file specified.</p>\n<p>If <code>module</code> is <code>system</code> or <code>amd</code>, all module files will also be concatenated into this file after all global content.</p>\n<p>Note: <code>outFile</code> cannot be used unless <code>module</code> is <code>None</code>, <code>System</code>, or <code>AMD</code>.\nThis option <em>cannot</em> be used to bundle CommonJS or ES6 modules.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>outFile<td/></tr>\n<tr><td>Default</td><td>`n/a`<td/></tr>\n<tr><td>Related</td><td>[`out`](#out), [`outDir`](#outDir)<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-1_0.html\">1.0</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outDir'><a aria-label=\"Link to the compiler option:outDir\" title=\"Link to the compiler option:outDir\" href='#outDir'>#</a> Out Dir - <code>outDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>If specified, <code>.js</code> (as well as <code>.d.ts</code>, <code>.js.map</code>, etc.) files will be emitted in the specified directory.\nThe directory structure of the original source files is preserved; see <a href=\"#rootDir\">rootDir</a> if the computed root is not what you intended.</p>\n<pre><code></code></pre>\n<p>If not specified, <code>.js</code> files will be emitted in the same directory as the <code>.ts</code> files they were generated from.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>outDir<td/></tr>\n<tr><td>Default</td><td>`n/a`<td/></tr>\n<tr><td>Related</td><td>[`out`](#out), [`outFile`](#outFile)<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDir'><a aria-label=\"Link to the compiler option:rootDir\" title=\"Link to the compiler option:rootDir\" href='#rootDir'>#</a> Root Dir - <code>rootDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><strong>Default</strong>: The longest common path of all non-declaration input files. If <code>composite</code> is set, the default is instead the directory containing the <code>tsconfig.json</code> file.</p>\n<p>When TypeScript compiles files, it keeps the same directory structure in the output directory as exists in the input directory.</p>\n<p>For example, let’s say you have some input files:</p>\n<pre><code>MyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n├── types.d.ts\n</code></pre>\n<p>The inferred value for <code>rootDir</code> is the longest common path of all non-declaration input files, which in this case is <code>core/</code>.</p>\n<p>If your <code>outDir</code> was <code>dist</code>, TypeScript would write this tree:</p>\n<pre><code>MyProj\n├── dist\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n</code></pre>\n<p>However, you may have intended for <code>core</code> to be part of the output directory structure.\nBy setting <code>rootDir: \".\"</code> in <code>tsconfig.json</code>, TypeScript would write this tree:</p>\n<pre><code>MyProj\n├── dist\n|   ├── core\n│   │   ├── a.ts\n│   │   ├── b.ts\n│   │   ├── sub\n│   │   │   ├── c.ts\n</code></pre>\n<p>Importantly, <code>rootDir</code> <strong>does not affect which files become part of the compilation</strong>.\nIt has no interaction with the <code>include</code>, <code>exclude</code>, or <code>files</code> <code>tsconfig.json</code> settings.</p>\n<p>Note that TypeScript will never write an output file to a directory outside of <code>outDir</code>, and will never skip emitting a file.\nFor this reason, <code>rootDir</code> also enforces that all files which need to be emitted are underneath the <code>rootDir</code> path.</p>\n<p>For example, let’s say you had this tree:</p>\n<pre><code>MyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n├── helpers.ts\n</code></pre>\n<p>It would be an error to specify <code>rootDir</code> as <code>core</code> <em>and</em> <code>include</code> as <code>*</code> because it creates a file (<code>helpers.ts</code>) that would need to be emitted <em>outside</em> the <code>outDir</code> (i.e. <code>../helpers.js</code>).</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>rootDir<td/></tr>\n<tr><td>Default</td><td>Computed from the list of input files<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-1_5.html\">1.5</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='composite'><a aria-label=\"Link to the compiler option:composite\" title=\"Link to the compiler option:composite\" href='#composite'>#</a> Composite - <code>composite</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The <code>composite</code> option enforces certain constraints which make it possible for build tools (including TypeScript\nitself, under <code>--build</code> mode) to quickly determine if a project has been built yet.</p>\n<p>When this setting is on:</p>\n<ul>\n<li>The <code>rootDir</code> setting, if not explicitly set, defaults to the directory containing the <code>tsconfig.json</code> file.</li>\n<li>All implementation files must be matched by an <code>include</code> pattern or listed in the <code>files</code> array. If this constraint is violated, <code>tsc</code> will inform you which files weren’t specified.</li>\n<li><code>declaration</code> defaults to <code>true</code></li>\n</ul>\n<p>You can find documentation on TypeScript projects in <a href=\"https://www.typescriptlang.org/docs/handbook/project-references.html\">the handbook</a>.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>composite<td/></tr>\n<tr><td>Default</td><td>`true`<td/></tr>\n<tr><td>Related</td><td>[`incremental`](#incremental), [`tsBuildInfoFile`](#tsBuildInfoFile)<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-3_0.html\">3.0</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='tsBuildInfoFile'><a aria-label=\"Link to the compiler option:tsBuildInfoFile\" title=\"Link to the compiler option:tsBuildInfoFile\" href='#tsBuildInfoFile'>#</a> TS Build Info File - <code>tsBuildInfoFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify file to store incremental compilation information as a part of composite projects which allow for faster\nbuilding of larger TypeScript codebases. You can read more about composite projects <a href=\"/docs/handbook/project-references.html\">in the handbook</a>.</p>\n<p>This option offers a way to configure the place where TypeScript keeps track of the files it stores on the disk to\nindicate a project’s build state - by default they are in the same folder as your emitted JavaScript.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>tsBuildInfoFile<td/></tr>\n<tr><td>Default</td><td> .tsbuildinfo<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-3_4.html\">3.4</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='removeComments'><a aria-label=\"Link to the compiler option:removeComments\" title=\"Link to the compiler option:removeComments\" href='#removeComments'>#</a> Remove Comments - <code>removeComments</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Strips all comments from TypeScript files when converting into JavaScript. Defaults to being <code>true</code>.</p>\n<p>For example, working this TypeScript file which has a JSDoc comment:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #008000\">/** Used to show the user a hello message */</span>\n<span  style=\"color: #0000FF\">export</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">declare</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> helloWorld = </span><span  style=\"color: #A31515\">\"hi\"</span><span  style=\"color: #000000\">;</span></code></div></pre>\n<p>Without setting <code>removeComments</code> or having it as <code>true</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code></code></div></pre>\n<p>When <code>removeComments</code> is set to <code>false</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code></code></div></pre>\n<p>This means your comments will show up in the JavaScript code.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>removeComments<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmit'><a aria-label=\"Link to the compiler option:noEmit\" title=\"Link to the compiler option:noEmit\" href='#noEmit'>#</a> No Emit - <code>noEmit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit compiler output files like JavaScript source code, source-maps or declarations.</p>\n<p>This leaves another tool like <a href=\"https://babeljs.io\">Babel</a>, or <a href=\"https://github.com/swc-project/swc\">swc</a> to handle converting the TypeScript file to a file which can run inside a JavaScript environment.</p>\n<p>You can then use TypeScript as a tool for providing editor integration, and as a source code linter.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>noEmit<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importHelpers'><a aria-label=\"Link to the compiler option:importHelpers\" title=\"Link to the compiler option:importHelpers\" href='#importHelpers'>#</a> Import Helpers - <code>importHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>For certain downleveling operations, TypeScript uses some helper code for operations like extending class, spreading arrays or objects, and async operations.\nBy default, these helpers are inserted into files which use them.\nThis can result in code duplication if the same helper is used in many different modules.</p>\n<p>If the <code>importHelpers</code> flag is on, these helper functions are instead imported from the <a href=\"https://www.npmjs.com/package/tslib\">tslib</a> module.\nYou will need to ensure that the <code>tslib</code> module is able to be imported at runtime.\nThis only affects modules; global script files will not attempt to import modules.</p>\n<p>For example, with this TypeScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">export</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn(arr: number[]) {</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> arr2 = [</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">, ...arr];</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>Turning on <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> and <code>importHelpers</code> is still false:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> __read = (</span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\"> && </span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\">.__read) || </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> (o, n) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> m = </span><span  style=\"color: #0000FF\">typeof</span><span  style=\"color: #000000\"> Symbol === </span><span  style=\"color: #A31515\">\"function\"</span><span  style=\"color: #000000\"> && o[Symbol.iterator];</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (!m) </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> o;</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> i = m.call(o), r, ar = [], e;</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">try</span><span  style=\"color: #000000\"> {</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #0000FF\">while</span><span  style=\"color: #000000\"> ((n === </span><span  style=\"color: #0000FF\">void</span><span  style=\"color: #000000\"> </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\"> || n-- &gt; </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">) && !(r = i.next()).done) ar.push(r.value);</span>\n<span  style=\"color: #000000\">    }</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">catch</span><span  style=\"color: #000000\"> (error) { e = { error: error }; }</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">finally</span><span  style=\"color: #000000\"> {</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #0000FF\">try</span><span  style=\"color: #000000\"> {</span>\n<span  style=\"color: #000000\">            </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (r && !r.done && (m = i[</span><span  style=\"color: #A31515\">\"return\"</span><span  style=\"color: #000000\">])) m.call(i);</span>\n<span  style=\"color: #000000\">        }</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #0000FF\">finally</span><span  style=\"color: #000000\"> { </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (e) </span><span  style=\"color: #0000FF\">throw</span><span  style=\"color: #000000\"> e.error; }</span>\n<span  style=\"color: #000000\">    }</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> ar;</span>\n<span  style=\"color: #000000\">};</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> __spread = (</span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\"> && </span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\">.__spread) || </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> () {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">for</span><span  style=\"color: #000000\"> (</span><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> ar = [], i = </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">; i &lt; </span><span  style=\"color: #0000FF\">arguments</span><span  style=\"color: #000000\">.length; i++) ar = ar.concat(__read(</span><span  style=\"color: #0000FF\">arguments</span><span  style=\"color: #000000\">[i]));</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> ar;</span>\n<span  style=\"color: #000000\">};</span>\n<span  style=\"color: #000000\">Object.defineProperty(exports, </span><span  style=\"color: #A31515\">\"__esModule\"</span><span  style=\"color: #000000\">, { value: </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\"> });</span>\n<span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn(arr) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> arr2 = __spread([</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">], arr);</span>\n<span  style=\"color: #000000\">}</span>\n<span  style=\"color: #000000\">exports.fn = fn;</span></code></div></pre>\n<p>Then turning on both <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> and <code>importHelpers</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">Object.defineProperty(exports, </span><span  style=\"color: #A31515\">\"__esModule\"</span><span  style=\"color: #000000\">, { value: </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\"> });</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> tslib_1 = require(</span><span  style=\"color: #A31515\">\"tslib\"</span><span  style=\"color: #000000\">);</span>\n<span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn(arr) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> arr2 = tslib_1.__spread([</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">], arr);</span>\n<span  style=\"color: #000000\">}</span>\n<span  style=\"color: #000000\">exports.fn = fn;</span></code></div></pre>\n<p>You can use <a href=\"#noEmitHelpers\"><code>noEmitHelpers</code></a> when you provide your own implementations of these functions.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>importHelpers<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Related</td><td>[`noEmitHelpers`](#noEmitHelpers), [`downlevelIteration`](#downlevelIteration), [`importHelpers`](#importHelpers)<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='downlevelIteration'><a aria-label=\"Link to the compiler option:downlevelIteration\" title=\"Link to the compiler option:downlevelIteration\" href='#downlevelIteration'>#</a> Downlevel Iteration - <code>downlevelIteration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>ECMAScript 6 added several new iteration primitives: the <code>for / of</code> loop (<code>for (el of arr)</code>), Array spread (<code>[a, ...b]</code>), argument spread (<code>fn(...args)</code>), and <code>Symbol.iterator</code>.\n<code>--downlevelIteration</code> allows for these iteration primitives to be used more accurately in ES5 environments if a <code>Symbol.iterator</code> implementation is present.</p>\n<h4 id=\"example-effects-on-for--of\"><a href=\"#example-effects-on-for--of\" aria-label=\"example effects on for  of permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: Effects on <code>for / of</code></h4>\n<p>Without <code>downlevelIteration</code> on, a <code>for / of</code> loop on any object is downleveled to a traditional <code>for</code> loop:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> str = </span><span  style=\"color: #A31515\">\"Hello!\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #0000FF\">for</span><span  style=\"color: #000000\"> (</span><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> _i = </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">, str_1 = str; _i &lt; str_1.length; _i++) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> s = str_1[_i];</span>\n<span  style=\"color: #000000\">    console.log(s);</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>This is often what people expect, but it’s not 100% compliant with ECMAScript 6 behavior.\nCertain strings, such as emoji (😜), have a <code>.length</code> of 2 (or even more!), but should iterate as 1 unit in a <code>for-of</code> loop.\nSee <a href=\"https://blog.jonnew.com/posts/poo-dot-length-equals-two\">this blog post by Jonathan New</a> for a longer explanation.</p>\n<p>When <code>downlevelIteration</code> is enabled, TypeScript will use a helper function that checks for a <code>Symbol.iterator</code> implementation (either native or polyfill).\nIf this implementation is missing, you’ll fall back to index-based iteration.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> __values = (</span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\"> && </span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\">.__values) || </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\">(o) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> s = </span><span  style=\"color: #0000FF\">typeof</span><span  style=\"color: #000000\"> Symbol === </span><span  style=\"color: #A31515\">\"function\"</span><span  style=\"color: #000000\"> && Symbol.iterator, m = s && o[s], i = </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (m) </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> m.call(o);</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (o && </span><span  style=\"color: #0000FF\">typeof</span><span  style=\"color: #000000\"> o.length === </span><span  style=\"color: #A31515\">\"number\"</span><span  style=\"color: #000000\">) </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> {</span>\n<span  style=\"color: #000000\">        next: </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> () {</span>\n<span  style=\"color: #000000\">            </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (o && i &gt;= o.length) o = </span><span  style=\"color: #0000FF\">void</span><span  style=\"color: #000000\"> </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">            </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> { value: o && o[i++], done: !o };</span>\n<span  style=\"color: #000000\">        }</span>\n<span  style=\"color: #000000\">    };</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">throw</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">new</span><span  style=\"color: #000000\"> TypeError(s ? </span><span  style=\"color: #A31515\">\"Object is not iterable.\"</span><span  style=\"color: #000000\"> : </span><span  style=\"color: #A31515\">\"Symbol.iterator is not defined.\"</span><span  style=\"color: #000000\">);</span>\n<span  style=\"color: #000000\">};</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> e_1, _a;</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> str = </span><span  style=\"color: #A31515\">\"Hello!\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #0000FF\">try</span><span  style=\"color: #000000\"> {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">for</span><span  style=\"color: #000000\"> (</span><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> str_1 = __values(str), str_1_1 = str_1.next(); !str_1_1.done; str_1_1 = str_1.next()) {</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> s = str_1_1.value;</span>\n<span  style=\"color: #000000\">        console.log(s);</span>\n<span  style=\"color: #000000\">    }</span>\n<span  style=\"color: #000000\">}</span>\n<span  style=\"color: #0000FF\">catch</span><span  style=\"color: #000000\"> (e_1_1) { e_1 = { error: e_1_1 }; }</span>\n<span  style=\"color: #0000FF\">finally</span><span  style=\"color: #000000\"> {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">try</span><span  style=\"color: #000000\"> {</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (str_1_1 && !str_1_1.done && (_a = str_1.return)) _a.call(str_1);</span>\n<span  style=\"color: #000000\">    }</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">finally</span><span  style=\"color: #000000\"> { </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (e_1) </span><span  style=\"color: #0000FF\">throw</span><span  style=\"color: #000000\"> e_1.error; }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<blockquote>\n<blockquote>\n<p><strong>Note:</strong> Remember, <code>downlevelIteration</code> does not improve compliance if <code>Symbol.iterator</code> is not present!</p>\n</blockquote>\n</blockquote>\n<h4 id=\"example-effects-on-array-spreads\"><a href=\"#example-effects-on-array-spreads\" aria-label=\"example effects on array spreads permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: Effects on Array Spreads</h4>\n<p>This is an array spread:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #008000\">// Make a new array who elements are 1 followed by the elements of arr2</span>\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> arr = [</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">, ...arr2];</span></code></div></pre>\n<p>Based on the description, it sounds easy to downlevel to ES5:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #008000\">// The same, right?</span>\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> arr = [</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">].concat(arr2);</span></code></div></pre>\n<p>However, this is observably different in certain rare cases.\nFor example, if an array has a “hole” in it, the missing index will create an <em>own</em> property if spreaded, but will not if built using <code>concat</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #008000\">// Make an array where the '1' element is missing</span>\n<span  style=\"color: #0000FF\">let</span><span  style=\"color: #000000\"> missing = [</span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">, , </span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">];</span>\n<span  style=\"color: #0000FF\">let</span><span  style=\"color: #000000\"> spreaded = [...missing];</span>\n<span  style=\"color: #0000FF\">let</span><span  style=\"color: #000000\"> concated = [].concat(missing);</span>\n\n<span  style=\"color: #008000\">// true</span>\n<span  style=\"color: #A31515\">\"1\"</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">in</span><span  style=\"color: #000000\"> spreaded;</span>\n<span  style=\"color: #008000\">// false</span>\n<span  style=\"color: #A31515\">\"1\"</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">in</span><span  style=\"color: #000000\"> concated;</span></code></div></pre>\n<p>Just as with <code>for / of</code>, <code>downlevelIteration</code> will use <code>Symbol.iterator</code> (if present) to more accurately emulate ES 6 behavior.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>downlevelIteration<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_3.html\">2.3</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='isolatedModules'><a aria-label=\"Link to the compiler option:isolatedModules\" title=\"Link to the compiler option:isolatedModules\" href='#isolatedModules'>#</a> Isolated Modules - <code>isolatedModules</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>While you can use TypeScript to produce JavaScript code from TypeScript code, it’s also common to use other transpilers such as <a href=\"https://babeljs.io\">Babel</a> to do this.\nHowever, most other transpilers only operate on a single file at a time, so can’t apply code transforms that depend on whole-program analysis.\nThis restriction also applies to TypeScript’s <code>ts.transpileModule</code> API which is used by some build tools.</p>\n<p>These limitations can cause runtime problems for some TypeScript constructs.\nSetting the <code>isolatedModules</code> flag tells TypeScript to warn you if you write certain code that can’t be correctly interpreted by a single-file transpilation process.\nIt does not change the behavior of your code, or otherwise change the behavior of TypeScript’s checking and emitting process.</p>\n<h4 id=\"exports-of-non-value-identifiers\"><a href=\"#exports-of-non-value-identifiers\" aria-label=\"exports of non value identifiers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exports of Non-Value Identifiers</h4>\n<p>In TypeScript, you can import a <em>type</em> and then subsequently export it:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">import</span><span  style=\"color: #000000\"> { someType, someFunction } </span><span  style=\"color: #0000FF\">from</span><span  style=\"color: #000000\"> </span><span  style=\"color: #A31515\">\"someModule\"</span><span  style=\"color: #000000\">;</span>\n\n<span  style=\"color: #000000\">someFunction();</span>\n\n<span  style=\"color: #0000FF\">export</span><span  style=\"color: #000000\"> { someType, someFunction };</span></code></div></pre>\n<p>Because there’s no value for <code>someType</code>, the emitted <code>export</code> will not try to export it (this would be a runtime error):</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #0000FF\">export</span><span  style=\"color: #000000\"> { someFunction };</span></code></div></pre>\n<p>Single-file transpilers don’t know whether <code>someType</code> produces a value or not, so it’s an error to export a name that only refers to a type if <code>isolatedModules</code> is set.</p>\n<h4 id=\"non-module-files\"><a href=\"#non-module-files\" aria-label=\"non module files permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Module Files</h4>\n<p>If <code>isolatedModules</code> is set, all implementation files must be <em>modules</em>.\nAn error occurs if any file isn’t a module:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span class = 'err' style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn() {}</span>\n<span class=\"error\"><span>All files must be modules when the '--isolatedModules' flag is provided.</span><span class=\"code\">1208</span></span><span class=\"error-behind\">All files must be modules when the '--isolatedModules' flag is provided.</span></code></div></pre>\n<p>This restriction doesn’t apply to <code>.d.ts</code> files</p>\n<h4 id=\"references-to-const-enum-members\"><a href=\"#references-to-const-enum-members\" aria-label=\"references to const enum members permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References to <code>const enum</code> members</h4>\n<p>In TypeScript, when you reference a <code>const enum</code> member, the reference is replaced by its actual value in the emitted JavaScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">declare</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">enum</span><span  style=\"color: #000000\"> Numbers {</span>\n<span  style=\"color: #000000\">  Zero = </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">,</span>\n<span  style=\"color: #000000\">  One = </span><span  style=\"color: #09835A\">1</span>\n<span  style=\"color: #000000\">}</span>\n<span  style=\"color: #000000\">console.log(Numbers.Zero + Numbers.One);</span></code></div></pre>\n<p>To:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">console.log(</span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\"> + </span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">);</span></code></div></pre>\n<p>Without knowledge of the values of these members, other transpilers can’t replace the references to <code>Number</code>, which would be a runtime error if left alone (since there is no <code>Numbers</code> object at runtime).\nBecause of this, when <code>isolatedModules</code> is set, it is an error to reference an ambient <code>const enum</code> member.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>isolatedModules<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<h2 id='Strict_Type_Checking_Options_6173'><a href='#Strict_Type_Checking_Options_6173'>#</a> Strict Checks</h2>\n<p>TypeScript supports a spectrum of JavaScript patterns, TypeScript patterns and strives for backwards compatibility with them all.</p>\n<p>Upgrading to a new version of TypeScript can uncover two types of errors:</p>\n<ul>\n<li>Errors which already exist in your codebase, TypeScript has uncovered because the language has become refined it’s understanding of JavaScript.</li>\n<li>A new suite of errors which tackle a whole new problem domain.</li>\n</ul>\n<p>TypeScript will usually add a compiler flag for the latter set of errors, and by default these are not enabled.\nIf you want to ensure that your codebase is as correct as possible, then use the option <a href=\"#strict\"><code>strict</code></a> to opt-in to every possible improvement as they are built.</p>\n<section class='compiler-option'>\n<h3 id='strict'><a aria-label=\"Link to the compiler option:strict\" title=\"Link to the compiler option:strict\" href='#strict'>#</a> Strict - <code>strict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The <code>strict</code> flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness.\nTurning this on is equivalent to enabling all of the <em>strict mode family</em> options, which are outlined below.\nYou can then turn off individual strict mode family checks as needed.</p>\n<p>Future versions of TypeScript may introduce additional stricter checking under this flag, so upgrades of TypeScript might result in new type errors in your program.\nWhen appropriate and possible, a corresponding flag will be added to disable that behavior.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>strict<td/></tr>\n<tr><td>Recommended</td><td>True<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Related</td><td>[`strictBindCallApply`](#strictBindCallApply), [`strictFunctionTypes`](#strictFunctionTypes), [`strictPropertyInitialization`](#strictPropertyInitialization)<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_3.html\">2.3</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitAny'><a aria-label=\"Link to the compiler option:noImplicitAny\" title=\"Link to the compiler option:noImplicitAny\" href='#noImplicitAny'>#</a> No Implicit Any - <code>noImplicitAny</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>In some cases where no type annotations are present, TypeScript will fall back to a type of <code>any</code> for a variable when it can not infer the type.</p>\n<p>This can cause some errors to be missed, for example:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn(s) {</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #008000\">// No error?</span>\n<span  style=\"color: #000000\">  console.log(s.subtr(</span><span  style=\"color: #09835A\">3</span><span  style=\"color: #000000\">));</span>\n<span  style=\"color: #000000\">}</span>\n<span  style=\"color: #000000\">fn(</span><span  style=\"color: #09835A\">42</span><span  style=\"color: #000000\">);</span></code></div></pre>\n<p>Turning on <code>noImplicitAny</code> however TypeScript will issue an error whenever it would have inferred <code>any</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn(s) {</span>\n<span class=\"error\"><span>Parameter 's' implicitly has an 'any' type.</span><span class=\"code\">7006</span></span><span class=\"error-behind\">Parameter 's' implicitly has an 'any' type.</span><span  style=\"color: #000000\">  console.log(s.subtr(</span><span  style=\"color: #09835A\">3</span><span  style=\"color: #000000\">));</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>noImplicitAny<td/></tr>\n<tr><td>Recommended</td><td>True<td/></tr>\n<tr><td>Default</td><td>`false`, unless `strict` is set<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictNullChecks'><a aria-label=\"Link to the compiler option:strictNullChecks\" title=\"Link to the compiler option:strictNullChecks\" href='#strictNullChecks'>#</a> Strict Null Checks - <code>strictNullChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When <code>strictNullChecks</code> is <code>false</code>; <code>null</code> and <code>undefined</code> are effectively removed from the language.\nThis can lead to unexpected errors at runtime.</p>\n<p>When <code>strictNullChecks</code> is <code>true</code>; <code>null</code> and <code>undefined</code> have their own distinct types and you’ll get a type error if you try to use them where a concrete value is expected.</p>\n<p>For example, with this TypeScript <code>users.find</code> has no guarantee that it will correctly find a user, but you can\nwrite code as though it will:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">declare</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> loggedInUsername: string;</span>\n\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> users = [</span>\n<span  style=\"color: #000000\">  { name: </span><span  style=\"color: #A31515\">\"Oby\"</span><span  style=\"color: #000000\">, age: </span><span  style=\"color: #09835A\">12</span><span  style=\"color: #000000\"> },</span>\n<span  style=\"color: #000000\">  { name: </span><span  style=\"color: #A31515\">\"Heera\"</span><span  style=\"color: #000000\">, age: </span><span  style=\"color: #09835A\">32</span><span  style=\"color: #000000\"> }</span>\n<span  style=\"color: #000000\">];</span>\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> loggedInUser = users.find(u </span><span  style=\"color: #0000FF\">=&gt;</span><span  style=\"color: #000000\"> u.name === loggedInUsername);</span>\n\n<span  style=\"color: #000000\">console.log(loggedInUser.age);</span></code></div></pre>\n<p>Turning on <code>strictNullChecks</code> will raise an error that you have not made a guarantee that the <code>loggedInUser</code> exists before trying to use it.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">declare</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> loggedInUsername: string;</span>\n\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> users = [</span>\n<span  style=\"color: #000000\">  { name: </span><span  style=\"color: #A31515\">\"Oby\"</span><span  style=\"color: #000000\">, age: </span><span  style=\"color: #09835A\">12</span><span  style=\"color: #000000\"> },</span>\n<span  style=\"color: #000000\">  { name: </span><span  style=\"color: #A31515\">\"Heera\"</span><span  style=\"color: #000000\">, age: </span><span  style=\"color: #09835A\">32</span><span  style=\"color: #000000\"> }</span>\n<span  style=\"color: #000000\">];</span>\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> loggedInUser = users.find(u </span><span  style=\"color: #0000FF\">=&gt;</span><span  style=\"color: #000000\"> u.name === loggedInUsername);</span>\n\n<span  style=\"color: #000000\">console.log(loggedInUser.age);</span>\n<span class=\"error\"><span>Object is possibly 'undefined'.</span><span class=\"code\">2532</span></span><span class=\"error-behind\">Object is possibly 'undefined'.</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>strictNullChecks<td/></tr>\n<tr><td>Recommended</td><td>True<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_0.html\">2.0</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictFunctionTypes'><a aria-label=\"Link to the compiler option:strictFunctionTypes\" title=\"Link to the compiler option:strictFunctionTypes\" href='#strictFunctionTypes'>#</a> Strict Function Types - <code>strictFunctionTypes</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When enabled, this flag causes functions parameters to be checked more correctly.</p>\n<p>Here’s a basic example with <code>strictFunctionTypes</code> off:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn(x: string) {</span>\n<span  style=\"color: #000000\">  console.log(</span><span  style=\"color: #A31515\">\"Hello, \"</span><span  style=\"color: #000000\"> + x.toLowerCase());</span>\n<span  style=\"color: #000000\">}</span>\n\n<span  style=\"color: #0000FF\">type</span><span  style=\"color: #000000\"> StringOrNumberFunc = (ns: string | number) </span><span  style=\"color: #0000FF\">=&gt;</span><span  style=\"color: #000000\"> void;</span>\n\n<span  style=\"color: #008000\">// Unsafe assignment</span>\n<span  style=\"color: #0000FF\">let</span><span  style=\"color: #000000\"> func: StringOrNumberFunc = fn;</span>\n<span  style=\"color: #008000\">// Unsafe call - will crash</span>\n<span  style=\"color: #000000\">func(</span><span  style=\"color: #09835A\">10</span><span  style=\"color: #000000\">);</span></code></div></pre>\n<p>With <code>strictFunctionTypes</code> <em>on</em>, the error is correctly detected:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn(x: string) {</span>\n<span  style=\"color: #000000\">  console.log(</span><span  style=\"color: #A31515\">\"Hello, \"</span><span  style=\"color: #000000\"> + x.toLowerCase());</span>\n<span  style=\"color: #000000\">}</span>\n\n<span  style=\"color: #0000FF\">type</span><span  style=\"color: #000000\"> StringOrNumberFunc = (ns: string | number) </span><span  style=\"color: #0000FF\">=&gt;</span><span  style=\"color: #000000\"> void;</span>\n\n<span  style=\"color: #008000\">// Unsafe assignment is prevented</span>\n<span  style=\"color: #0000FF\">let</span><span  style=\"color: #000000\"> func: StringOrNumberFunc = fn;</span>\n<span class=\"error\"><span>Type '(x: string) =&gt; void' is not assignable to type 'StringOrNumberFunc'.\n  Types of parameters 'x' and 'ns' are incompatible.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '(x: string) =&gt; void' is not assignable to type 'StringOrNumberFunc'.\n  Types of parameters 'x' and 'ns' are incompatible.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.</span></code></div></pre>\n<p>During development of this feature, we discovered a large number of inherently unsafe class hierarchies, including some in the DOM.\nBecause of this, the setting only applies to functions written in <em>function</em> syntax, not to those in <em>method</em> syntax:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">type</span><span  style=\"color: #000000\"> Methodish = {</span>\n<span  style=\"color: #000000\">  func(x: string | number): void;</span>\n<span  style=\"color: #000000\">};</span>\n\n<span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn(x: string) {</span>\n<span  style=\"color: #000000\">  console.log(</span><span  style=\"color: #A31515\">\"Hello, \"</span><span  style=\"color: #000000\"> + x.toLowerCase());</span>\n<span  style=\"color: #000000\">}</span>\n\n<span  style=\"color: #008000\">// Ultimately an unsafe assignment, but not detected</span>\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> m: Methodish = {</span>\n<span  style=\"color: #000000\">  func: fn</span>\n<span  style=\"color: #000000\">};</span>\n<span  style=\"color: #000000\">m.func(</span><span  style=\"color: #09835A\">10</span><span  style=\"color: #000000\">);</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>strictFunctionTypes<td/></tr>\n<tr><td>Recommended</td><td>True<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_6.html\">2.6</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictBindCallApply'><a aria-label=\"Link to the compiler option:strictBindCallApply\" title=\"Link to the compiler option:strictBindCallApply\" href='#strictBindCallApply'>#</a> Strict Bind Call Apply - <code>strictBindCallApply</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><strong>Default</strong>: <code>false</code>, unless <code>strict</code> is set.</p>\n<p>When set, TypeScript will check that the built-in methods of functions <code>call</code>, <code>bind</code>, and <code>apply</code> are invoked with correct argument for the underlying function:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #008000\">// With strictBindCallApply on</span>\n<span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn(x: string) {</span>\n<span  style=\"color: #000000\">   </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> parseInt(x);</span>\n<span  style=\"color: #000000\">}</span>\n\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> n1 = fn.call(</span><span  style=\"color: #0000FF\">undefined</span><span  style=\"color: #000000\">, </span><span  style=\"color: #A31515\">\"10\"</span><span  style=\"color: #000000\">);</span>\n<span  style=\"color: #000000\">      ^?</span>\n\n<span  style=\"color: #000000\">const n2 = fn.call(</span><span  style=\"color: #0000FF\">undefined</span><span  style=\"color: #000000\">, </span><span  style=\"color: #0000FF\">false</span><span  style=\"color: #000000\">);</span></code></div></pre>\n<p>Otherwise, these functions accept any arguments and will return <code>any</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #008000\">// @strictBindCallApply: false</span>\n\n<span  style=\"color: #008000\">// With strictBindCallApply off</span>\n<span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn(x: string) {</span>\n<span  style=\"color: #000000\">   </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> parseInt(x);</span>\n<span  style=\"color: #000000\">}</span>\n\n<span  style=\"color: #008000\">// Note: No error; return type is 'any'</span>\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> n = fn.call(</span><span  style=\"color: #0000FF\">undefined</span><span  style=\"color: #000000\">, </span><span  style=\"color: #0000FF\">false</span><span  style=\"color: #000000\">);</span>\n<span  style=\"color: #000000\">      ^?</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>strictBindCallApply<td/></tr>\n<tr><td>Recommended</td><td>True<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-3_2.html\">3.2</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictPropertyInitialization'><a aria-label=\"Link to the compiler option:strictPropertyInitialization\" title=\"Link to the compiler option:strictPropertyInitialization\" href='#strictPropertyInitialization'>#</a> Strict Property Initialization - <code>strictPropertyInitialization</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set to true, TypeScript will raise an error when a class property was declared but not set during the constructor.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">class</span><span  style=\"color: #000000\"> UserAccount {</span>\n<span  style=\"color: #000000\">  name: string;</span>\n<span  style=\"color: #000000\">  accountType = </span><span  style=\"color: #A31515\">\"user\"</span><span  style=\"color: #000000\">;</span>\n\n<span  style=\"color: #000000\">  email: string;</span>\n<span class=\"error\"><span>Property 'email' has no initializer and is not definitely assigned in the constructor.</span><span class=\"code\">2564</span></span><span class=\"error-behind\">Property 'email' has no initializer and is not definitely assigned in the constructor.</span><span  style=\"color: #000000\">  address: string | undefined;</span>\n\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0000FF\">constructor</span><span  style=\"color: #000000\">(name: string) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\">.name = name;</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #008000\">// Note that this.email is not set</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>In the above case:</p>\n<ul>\n<li><code>this.name</code> is set specifically.</li>\n<li><code>this.accountType</code> is set by default.</li>\n<li><code>this.email</code> is not set and raises an error.</li>\n<li><code>this.address</code> is declared as also being <code>undefined</code> which means it does not have to be set.</li>\n</ul>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>strictPropertyInitialization<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_7.html\">2.7</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitThis'><a aria-label=\"Link to the compiler option:noImplicitThis\" title=\"Link to the compiler option:noImplicitThis\" href='#noImplicitThis'>#</a> No Implicit This - <code>noImplicitThis</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Raise error on ‘this’ expressions with an implied ‘any’ type.</p>\n<p>For example, the class below returns a function which tries to access <code>this.width</code> and <code>this.height</code> - but the context\nfor <code>this</code> inside the function inside <code>getAreaFunction</code> is not the instance of the Rectangle.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">class</span><span  style=\"color: #000000\"> Rectangle {</span>\n<span  style=\"color: #000000\">  width: number;</span>\n<span  style=\"color: #000000\">  height: number;</span>\n\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0000FF\">constructor</span><span  style=\"color: #000000\">(width: number, height: number) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\">.width = width;</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\">.height = height;</span>\n<span  style=\"color: #000000\">  }</span>\n\n<span  style=\"color: #000000\">  getAreaFunction() {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\">() {</span>\n<span  style=\"color: #000000\">      </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> </span><span class = 'err' style=\"color: #0000FF\">this</span><span  style=\"color: #000000\">.width * </span><span class = 'err' style=\"color: #0000FF\">this</span><span  style=\"color: #000000\">.height;</span>\n<span class=\"error\"><span>'this' implicitly has type 'any' because it does not have a type annotation.</br>'this' implicitly has type 'any' because it does not have a type annotation.</span><span class=\"code\">2683<br/>2683</span></span><span class=\"error-behind\">'this' implicitly has type 'any' because it does not have a type annotation.</br>'this' implicitly has type 'any' because it does not have a type annotation.</span><span  style=\"color: #000000\">    };</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>noImplicitThis<td/></tr>\n<tr><td>Recommended</td><td>True<td/></tr>\n<tr><td>Default</td><td>`false`, unless `strict` is set<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_0.html\">2.0</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='alwaysStrict'><a aria-label=\"Link to the compiler option:alwaysStrict\" title=\"Link to the compiler option:alwaysStrict\" href='#alwaysStrict'>#</a> Always Strict - <code>alwaysStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Ensures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">ECMAScript strict</a> mode was introduced in ES5 and provides behavior tweaks to the runtime of the JavaScript engine to improve performance, and makes a set of errors throw instead of silently ignoring them.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>alwaysStrict<td/></tr>\n<tr><td>Default</td><td>`false`, unless `strict` is set<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_1.html\">2.1</a><td/></tr></table>\n</div></section>\n<h2 id='Module_Resolution_Options_6174'><a href='#Module_Resolution_Options_6174'>#</a> Module Resolution</h2>\n<p>Additional Checks Copy</p>\n<section class='compiler-option'>\n<h3 id='moduleResolution'><a aria-label=\"Link to the compiler option:moduleResolution\" title=\"Link to the compiler option:moduleResolution\" href='#moduleResolution'>#</a> Module Resolution - <code>moduleResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify module resolution strategy: ‘node’ (Node.js) or ‘classic’ (TypeScript pre-1.6). You probably won’t need to use this.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>moduleResolution<td/></tr>\n<tr><td>Status</td><td>Deprecated<td/></tr>\n<tr><td>Status</td><td>Deprecated<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='baseUrl'><a aria-label=\"Link to the compiler option:baseUrl\" title=\"Link to the compiler option:baseUrl\" href='#baseUrl'>#</a> Base Url - <code>baseUrl</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Lets you set a base directory to resolve non-absolute module names.</p>\n<p>TODO: “non-absolute” - is this only relative imports or does it include named imports like a package?</p>\n<p>You can define a root folder where you can do absolute file resolution. E.g.</p>\n<pre><code>baseUrl/\n├── ex.ts\n├── hello\n│   └── world.ts\n└── tsconfig.json\n</code></pre>\n<p>With <code>\"baseUrl\": \"./\"</code> inside this project TypeScript will look for files starting at the same folder as the <code>tsconfig.json</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">import</span><span  style=\"color: #000000\"> { helloWorld } </span><span  style=\"color: #0000FF\">from</span><span  style=\"color: #000000\"> </span><span  style=\"color: #A31515\">\"hello/world\"</span><span  style=\"color: #000000\">;</span>\n\n<span  style=\"color: #000000\">console.log(helloWorld);</span></code></div></pre>\n<p>If you get tired of imports always looking like <code>\"../\"</code> or <code>\"./\"</code>. Or needing\nto change as you move files, this is a great way to fix that.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>baseUrl<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='paths'><a aria-label=\"Link to the compiler option:paths\" title=\"Link to the compiler option:paths\" href='#paths'>#</a> Paths - <code>paths</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>A series of entries which re-map imports to lookup locations relative to the ‘baseUrl’.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>paths<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDirs'><a aria-label=\"Link to the compiler option:rootDirs\" title=\"Link to the compiler option:rootDirs\" href='#rootDirs'>#</a> Root Dirs - <code>rootDirs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Using ‘rootDirs’, you can inform the compiler that there are many “virtual” directories acting as a single root.\nThis allows the compiler to resolve relative modules imports within these “virtual” directories as if were merged together in one directory.</p>\n<p>For example :</p>\n<pre><code> src\n └── views\n     └── view1.ts (can import './template1', './view2`)\n     └── view2.ts (can import './template1', './view1`)\n\n generated\n └── templates\n         └── views\n             └── template1.ts (can import './view1', './view2')\n</code></pre>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"compilerOptions\"</span><span  style=\"color: #000000\">: {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"rootDirs\"</span><span  style=\"color: #000000\">: [</span><span  style=\"color: #A31515\">\"src/views\"</span><span  style=\"color: #000000\">, </span><span  style=\"color: #A31515\">\"generated/templates/views\"</span><span  style=\"color: #000000\">]</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>This does not affect how TypeScript emits the JavaScript, it only emulates the assumption that they will be able to\nwork via those relative paths at runtime.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>rootDirs<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_0.html\">2.0</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='typeRoots'><a aria-label=\"Link to the compiler option:typeRoots\" title=\"Link to the compiler option:typeRoots\" href='#typeRoots'>#</a> Type Roots - <code>typeRoots</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default all <em>visible</em> ”<code>@types</code>” packages are included in your compilation.\nPackages in <code>node_modules/@types</code> of any enclosing folder are considered <em>visible</em>.\nFor example, that means packages within <code>./node_modules/@types/</code>, <code>../node_modules/@types/</code>, <code>../../node_modules/@types/</code>, and so on.</p>\n<p>If <code>typeRoots</code> is specified, <em>only</em> packages under <code>typeRoots</code> will be included. For example:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"compilerOptions\"</span><span  style=\"color: #000000\">: {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"typeRoots\"</span><span  style=\"color: #000000\">: [</span><span  style=\"color: #A31515\">\"./typings\"</span><span  style=\"color: #000000\">]</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>This config file will include <em>all</em> packages under <code>./typings</code>, and no packages from <code>./node_modules/@types</code>.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>typeRoots<td/></tr>\n<tr><td>Related</td><td>[`types`](#types)<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='types'><a aria-label=\"Link to the compiler option:types\" title=\"Link to the compiler option:types\" href='#types'>#</a> Types - <code>types</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default all <em>visible</em> ”<code>@types</code>” packages are included in your compilation.\nPackages in <code>node_modules/@types</code> of any enclosing folder are considered <em>visible</em>.\nFor example, that means packages within <code>./node_modules/@types/</code>, <code>../node_modules/@types/</code>, <code>../../node_modules/@types/</code>, and so on.</p>\n<p>If <code>types</code> is specified, only packages listed will be included. For instance:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"compilerOptions\"</span><span  style=\"color: #000000\">: {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"types\"</span><span  style=\"color: #000000\">: [</span><span  style=\"color: #A31515\">\"node\"</span><span  style=\"color: #000000\">, </span><span  style=\"color: #A31515\">\"lodash\"</span><span  style=\"color: #000000\">, </span><span  style=\"color: #A31515\">\"express\"</span><span  style=\"color: #000000\">]</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>This <code>tsconfig.json</code> file will <em>only</em> include <code>./node_modules/@types/node</code>, <code>./node_modules/@types/lodash</code> and <code>./node_modules/@types/express</code>.\nOther packages under <code>node_modules/@types/*</code> will not be included.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>types<td/></tr>\n<tr><td>Related</td><td>[`typeRoots`](#typeRoots)<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowSyntheticDefaultImports'><a aria-label=\"Link to the compiler option:allowSyntheticDefaultImports\" title=\"Link to the compiler option:allowSyntheticDefaultImports\" href='#allowSyntheticDefaultImports'>#</a> Allow Synthetic Default Imports - <code>allowSyntheticDefaultImports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set to true, <code>allowSyntheticDefaultImports</code> let’s you write an import like:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">import</span><span  style=\"color: #000000\"> React </span><span  style=\"color: #0000FF\">from</span><span  style=\"color: #000000\"> </span><span  style=\"color: #A31515\">\"react\"</span><span  style=\"color: #000000\">;</span></code></div></pre>\n<p>instead of:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">import</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">*</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">as</span><span  style=\"color: #000000\"> React </span><span  style=\"color: #0000FF\">from</span><span  style=\"color: #000000\"> </span><span  style=\"color: #A31515\">\"react\"</span><span  style=\"color: #000000\">;</span></code></div></pre>\n<p>When the module <strong>does not</strong> specify a default export.</p>\n<p>This does not affect the JavaScript emitted by TypeScript, it only for the type checking.\nThis option brings the behavior of TypeScript in-line with Babel, where extra code is emitted to make using a default export of a module more ergonomic.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>allowSyntheticDefaultImports<td/></tr>\n<tr><td>Default</td><td>module === \"system\" or esModuleInterop<td/></tr>\n<tr><td>Related</td><td>[`esModuleInterop`](#esModuleInterop)<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-1_8.html\">1.8</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='esModuleInterop'><a aria-label=\"Link to the compiler option:esModuleInterop\" title=\"Link to the compiler option:esModuleInterop\" href='#esModuleInterop'>#</a> Es Module Interop - <code>esModuleInterop</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports.</p>\n<p>TypeScript adheres to the EcmaScript standard for modules, which means that a file with exports would have to specifically\ninclude a <code>default</code> export in order to support syntax like <code>import React from \"react\"</code>. This is not that common in\nmodules for commonjs. For example, without <code>esModuleInterop</code> as true:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #008000\">// @filename: utilFunctions.js</span>\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> getStringLength = str </span><span  style=\"color: #0000FF\">=&gt;</span><span  style=\"color: #000000\"> str.length;</span>\n\n<span  style=\"color: #000000\">module.exports = {</span>\n<span  style=\"color: #000000\">  getStringLength</span>\n<span  style=\"color: #000000\">};</span>\n\n<span  style=\"color: #008000\">// @filename: index.ts</span>\n<span  style=\"color: #0000FF\">import</span><span  style=\"color: #000000\"> utils </span><span  style=\"color: #0000FF\">from</span><span  style=\"color: #000000\"> </span><span  style=\"color: #A31515\">\"./utilFunctions\"</span><span  style=\"color: #000000\">;</span>\n\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> count = utils.getStringLength(</span><span  style=\"color: #A31515\">\"Check JS\"</span><span  style=\"color: #000000\">);</span></code></div></pre>\n<p>This won’t work because there isn’t a <code>default</code> object which you can import. Even though it feels like it should.\nFor convenience, transpilers like Babel will automatically create a default if one isn’t created. Making the module look a bit more like:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #008000\">// @filename: utilFunctions.js</span>\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> getStringLength = str </span><span  style=\"color: #0000FF\">=&gt;</span><span  style=\"color: #000000\"> str.length;</span>\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> allFunctions = {</span>\n<span  style=\"color: #000000\">  getStringLength</span>\n<span  style=\"color: #000000\">};</span>\n\n<span  style=\"color: #000000\">module.exports = allFunctions;</span></code></div></pre>\n<p>Turning on this compiler flag will also enable <a href=\"#allowSyntheticDefaultImports\"><code>allowSyntheticDefaultImports</code></a>.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>esModuleInterop<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Related</td><td>[`allowSyntheticDefaultImports`](#allowSyntheticDefaultImports)<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_7.html\">2.7</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveSymlinks'><a aria-label=\"Link to the compiler option:preserveSymlinks\" title=\"Link to the compiler option:preserveSymlinks\" href='#preserveSymlinks'>#</a> Preserve Symlinks - <code>preserveSymlinks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This is to reflect the same flag in Node.js, does not resolve the real path of symlinks.</p>\n<p>This flag also exhibits the opposite behavior to Webpack’s <code>resolve.symlinks</code> option (i.e. setting TypeScript’s <code>preserveSymlinks</code> to true parallels setting Webpack’s <code>resolve.symlinks</code> to false, and vice-versa).</p>\n<p>With this enabled, references to modules and packages (e.g. imports and /// <reference type=\"...\" /> directives) are all resolved relative to the location of the symbolic link file, rather than relative to the path that the symbolic link resolves to.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>preserveSymlinks<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUmdGlobalAccess'><a aria-label=\"Link to the compiler option:allowUmdGlobalAccess\" title=\"Link to the compiler option:allowUmdGlobalAccess\" href='#allowUmdGlobalAccess'>#</a> Allow Umd Global Access - <code>allowUmdGlobalAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set to true, allowUmdGlobalAccess lets you access UMD exports as globals from inside module files. A module file is a file that has imports or exports. Without this flag, using an export from a UMD module requires an import declaration.</p>\n<p>An example use case for this flag would be a web project where you know the a particular library (like jQuery or Lodash) will always be available at runtime, but you can’t access it with an import.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>allowUmdGlobalAccess<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-3_5.html\">3.5</a><td/></tr></table>\n</div></section>\n<h2 id='Source_Map_Options_6175'><a href='#Source_Map_Options_6175'>#</a> Source Maps</h2>\n<p>In order to provide rich debugging tools and crash reports which make sense to developers, TypeScript supports\nemitting additional files which conform to the JavaScript Source Map standards.</p>\n<p>These are emitted as <code>.map</code> files which live alongside the file they represent.</p>\n<section class='compiler-option'>\n<h3 id='sourceRoot'><a aria-label=\"Link to the compiler option:sourceRoot\" title=\"Link to the compiler option:sourceRoot\" href='#sourceRoot'>#</a> Source Root - <code>sourceRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the location where a debugger should locate TypeScript files instead of via source locations.\nThis string is treated verbatim inside the source-map, you can use a path or URL:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"compilerOptions\"</span><span  style=\"color: #000000\">: {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"sourceMap\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\">,</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"sourceRoot\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #A31515\">\"https://my-website.com/debug/source/\"</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>Would declare that <code>index.js</code> will have a source file at <code>https://my-website.com/debug/source/index.ts</code>.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>sourceRoot<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='mapRoot'><a aria-label=\"Link to the compiler option:mapRoot\" title=\"Link to the compiler option:mapRoot\" href='#mapRoot'>#</a> Map Root - <code>mapRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the location where debugger should locate map files instead of generated locations.\nThis string is treated verbatim inside the source-map, for example:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"compilerOptions\"</span><span  style=\"color: #000000\">: {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"sourceMap\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\">,</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"mapRoot\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #A31515\">\"https://my-website.com/debug/sourcemaps/\"</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>Would declare that <code>index.js</code> will have sourcemaps at <code>https://my-website.com/debug/sourcemaps/index.js.map</code>.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>mapRoot<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='inlineSourceMap'><a aria-label=\"Link to the compiler option:inlineSourceMap\" title=\"Link to the compiler option:inlineSourceMap\" href='#inlineSourceMap'>#</a> Inline Source Map - <code>inlineSourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set, instead of writing out a <code>.js.map</code> file to provide source maps, TypeScript will embed the source map content in the <code>.js</code> files.\nAlthough this results in larger JS files, it can be convenient in some scenarios.\nFor example, you might want to debug JS files on a webserver that doesn’t allow <code>.map</code> files to be served.</p>\n<p>Mutually exclusive with <a href=\"#sourceMap\"><code>sourceMap</code></a>.</p>\n<p>For example, with this TypeScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> helloWorld = </span><span  style=\"color: #A31515\">\"hi\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">console.log(helloWorld);</span></code></div></pre>\n<p>Converts to this JavaScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> helloWorld = </span><span  style=\"color: #A31515\">\"hi\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">console.log(helloWorld);</span></code></div></pre>\n<p>Then enable building it with <code>inlineSourceMap</code> enabled there is a comment at the bottom of the file which includes\na source-map for the file.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> helloWorld = </span><span  style=\"color: #A31515\">\"hi\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">console.log(helloWorld);</span>\n<span  style=\"color: #008000\">//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMifQ==</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>inlineSourceMap<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-1_5.html\">1.5</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='inlineSources'><a aria-label=\"Link to the compiler option:inlineSources\" title=\"Link to the compiler option:inlineSources\" href='#inlineSources'>#</a> Inline Sources - <code>inlineSources</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set, TypeScript will include the original content of the <code>.ts</code> file as an embedded string in the source map.\nThis is often useful in the same cases as <code>inlineSourceMap</code>.</p>\n<p>Requires either <code>sourceMap</code> or <code>inlineSourceMap</code> to be set.</p>\n<p>For example, with this TypeScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> helloWorld = </span><span  style=\"color: #A31515\">\"hi\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">console.log(helloWorld);</span></code></div></pre>\n<p>Converts to this JavaScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> helloWorld = </span><span  style=\"color: #A31515\">\"hi\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">console.log(helloWorld);</span></code></div></pre>\n<p>Then enable building it with <code>inlineSources</code> and <code>inlineSourceMap</code> enabled there is a comment at the bottom of the file which includes\na source-map for the file.\nNote that the end is different from the example in <a href=\"#inlineSourceMap\"><code>inlineSourceMap</code></a> because the source-map now contains the original source code also.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> helloWorld = </span><span  style=\"color: #A31515\">\"hi\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">console.log(helloWorld);</span>\n<span  style=\"color: #008000\">//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBoZWxsb1dvcmxkID0gXCJoaVwiO1xuY29uc29sZS5sb2coaGVsbG9Xb3JsZCk7Il19</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>inlineSources<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-1_5.html\">1.5</a><td/></tr></table>\n</div></section>\n<h2 id='Additional_Checks_6176'><a href='#Additional_Checks_6176'>#</a> Additional Checks</h2>\n<p>Additional Checks Copy</p>\n<section class='compiler-option'>\n<h3 id='noUnusedLocals'><a aria-label=\"Link to the compiler option:noUnusedLocals\" title=\"Link to the compiler option:noUnusedLocals\" href='#noUnusedLocals'>#</a> No Unused Locals - <code>noUnusedLocals</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors on unused local variables.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> myFunc = () </span><span  style=\"color: #0000FF\">=&gt;</span><span  style=\"color: #000000\"> {</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> onething = </span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> </span><span  style=\"color: #A31515\">\"Hello\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">};</span></code></div></pre>\n<p>Raises with</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span  style=\"color: #000000\">ex.ts(2,9): error TS6133: </span><span  style=\"color: #A31515\">'onething'</span><span  style=\"color: #000000\"> is declared but its value is never read.</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>noUnusedLocals<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_0.html\">2.0</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedParameters'><a aria-label=\"Link to the compiler option:noUnusedParameters\" title=\"Link to the compiler option:noUnusedParameters\" href='#noUnusedParameters'>#</a> No Unused Parameters - <code>noUnusedParameters</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors on unused parameters.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> myFunc = value </span><span  style=\"color: #0000FF\">=&gt;</span><span  style=\"color: #000000\"> </span><span  style=\"color: #A31515\">\"Hi\"</span><span  style=\"color: #000000\">;</span></code></div></pre>\n<p>Raises with</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span  style=\"color: #000000\">ex.ts(1,16): error TS6133: </span><span  style=\"color: #A31515\">'value'</span><span  style=\"color: #000000\"> is declared but its value is never read.</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>noUnusedParameters<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_0.html\">2.0</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitReturns'><a aria-label=\"Link to the compiler option:noImplicitReturns\" title=\"Link to the compiler option:noImplicitReturns\" href='#noImplicitReturns'>#</a> No Implicit Returns - <code>noImplicitReturns</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report error when all code paths in function do not return a value.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> foo(isError: boolean): string {</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (isError === </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\">) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">undefined</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #000000\">ex.ts(</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">,</span><span  style=\"color: #09835A\">41</span><span  style=\"color: #000000\">): error TS7030: Not all code paths </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> a value.</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>noImplicitReturns<td/></tr>\n<tr><td>Default</td><td>`false`, unless `strict` is set<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-1_8.html\">1.8</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noFallthroughCasesInSwitch'><a aria-label=\"Link to the compiler option:noFallthroughCasesInSwitch\" title=\"Link to the compiler option:noFallthroughCasesInSwitch\" href='#noFallthroughCasesInSwitch'>#</a> No Fallthrough Cases In Switch - <code>noFallthroughCasesInSwitch</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors for fallthrough cases in switch statement.\nEnsures that any non-empty case inside a switch statement includes either <code>break</code> or <code>return</code>.\nThis means you won’t accidentally ship a case fallthrough bug.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> a: number = </span><span  style=\"color: #09835A\">6</span><span  style=\"color: #000000\">;</span>\n\n<span  style=\"color: #0000FF\">switch</span><span  style=\"color: #000000\"> (a) {</span>\n<span  style=\"color: #000000\">  </span><span class = 'err' style=\"color: #0000FF\">case</span><span class = 'err' style=\"color: #000000\"> </span><span class = 'err' style=\"color: #09835A\">0</span><span class = 'err' style=\"color: #000000\">:</span>\n<span class=\"error\"><span>Fallthrough case in switch.</span><span class=\"code\">7029</span></span><span class=\"error-behind\">Fallthrough case in switch.</span><span  style=\"color: #000000\">    console.log(</span><span  style=\"color: #A31515\">\"even\"</span><span  style=\"color: #000000\">);</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0000FF\">case</span><span  style=\"color: #000000\"> </span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">:</span>\n<span  style=\"color: #000000\">    console.log(</span><span  style=\"color: #A31515\">\"odd\"</span><span  style=\"color: #000000\">);</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">break</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>noFallthroughCasesInSwitch<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-1_8.html\">1.8</a><td/></tr></table>\n</div></section>\n<h2 id='Experimental_Options_6177'><a href='#Experimental_Options_6177'>#</a> Experimental</h2>\n<p>TypeScript strives to only include features which are confirmed to be added into the JavaScript language.</p>\n<p>There have been cases where a feature is compelling enough to be an exception to that rule, and these live as experimental compiler flags.\nIt is possible that a version of these features may be different when/if they are added to the JavaScript language, and thus are considered risky.</p>\n<section class='compiler-option'>\n<h3 id='experimentalDecorators'><a aria-label=\"Link to the compiler option:experimentalDecorators\" title=\"Link to the compiler option:experimentalDecorators\" href='#experimentalDecorators'>#</a> Experimental Decorators - <code>experimentalDecorators</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Enables experimental support for ES7 decorators. You can find out more about decorator support in TypeScript in <a href=\"/docs/handbook/decorators.html\">the handbook</a></p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>experimentalDecorators<td/></tr>\n<tr><td>Related</td><td>[`emitDecoratorMetadata`](#emitDecoratorMetadata)<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitDecoratorMetadata'><a aria-label=\"Link to the compiler option:emitDecoratorMetadata\" title=\"Link to the compiler option:emitDecoratorMetadata\" href='#emitDecoratorMetadata'>#</a> Emit Decorator Metadata - <code>emitDecoratorMetadata</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Enables experimental support for emitting type metadata for decorators which works with the module <code>reflect-metadata</code>.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>emitDecoratorMetadata<td/></tr>\n<tr><td>Related</td><td>[`experimentalDecorators`](#experimentalDecorators)<td/></tr></table>\n</div></section>\n<h2 id='Advanced_Options_6178'><a href='#Advanced_Options_6178'>#</a> Advanced</h2>\n<p>Flags which help with debugging</p>\n<section class='compiler-option'>\n<h3 id='importHelpers'><a aria-label=\"Link to the compiler option:importHelpers\" title=\"Link to the compiler option:importHelpers\" href='#importHelpers'>#</a> Import Helpers - <code>importHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>For certain downleveling operations, TypeScript uses some helper code for operations like extending class, spreading arrays or objects, and async operations.\nBy default, these helpers are inserted into files which use them.\nThis can result in code duplication if the same helper is used in many different modules.</p>\n<p>If the <code>importHelpers</code> flag is on, these helper functions are instead imported from the <a href=\"https://www.npmjs.com/package/tslib\">tslib</a> module.\nYou will need to ensure that the <code>tslib</code> module is able to be imported at runtime.\nThis only affects modules; global script files will not attempt to import modules.</p>\n<p>For example, with this TypeScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">export</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn(arr: number[]) {</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> arr2 = [</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">, ...arr];</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>Turning on <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> and <code>importHelpers</code> is still false:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> __read = (</span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\"> && </span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\">.__read) || </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> (o, n) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> m = </span><span  style=\"color: #0000FF\">typeof</span><span  style=\"color: #000000\"> Symbol === </span><span  style=\"color: #A31515\">\"function\"</span><span  style=\"color: #000000\"> && o[Symbol.iterator];</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (!m) </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> o;</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> i = m.call(o), r, ar = [], e;</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">try</span><span  style=\"color: #000000\"> {</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #0000FF\">while</span><span  style=\"color: #000000\"> ((n === </span><span  style=\"color: #0000FF\">void</span><span  style=\"color: #000000\"> </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\"> || n-- &gt; </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">) && !(r = i.next()).done) ar.push(r.value);</span>\n<span  style=\"color: #000000\">    }</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">catch</span><span  style=\"color: #000000\"> (error) { e = { error: error }; }</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">finally</span><span  style=\"color: #000000\"> {</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #0000FF\">try</span><span  style=\"color: #000000\"> {</span>\n<span  style=\"color: #000000\">            </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (r && !r.done && (m = i[</span><span  style=\"color: #A31515\">\"return\"</span><span  style=\"color: #000000\">])) m.call(i);</span>\n<span  style=\"color: #000000\">        }</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #0000FF\">finally</span><span  style=\"color: #000000\"> { </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (e) </span><span  style=\"color: #0000FF\">throw</span><span  style=\"color: #000000\"> e.error; }</span>\n<span  style=\"color: #000000\">    }</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> ar;</span>\n<span  style=\"color: #000000\">};</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> __spread = (</span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\"> && </span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\">.__spread) || </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> () {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">for</span><span  style=\"color: #000000\"> (</span><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> ar = [], i = </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">; i &lt; </span><span  style=\"color: #0000FF\">arguments</span><span  style=\"color: #000000\">.length; i++) ar = ar.concat(__read(</span><span  style=\"color: #0000FF\">arguments</span><span  style=\"color: #000000\">[i]));</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> ar;</span>\n<span  style=\"color: #000000\">};</span>\n<span  style=\"color: #000000\">Object.defineProperty(exports, </span><span  style=\"color: #A31515\">\"__esModule\"</span><span  style=\"color: #000000\">, { value: </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\"> });</span>\n<span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn(arr) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> arr2 = __spread([</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">], arr);</span>\n<span  style=\"color: #000000\">}</span>\n<span  style=\"color: #000000\">exports.fn = fn;</span></code></div></pre>\n<p>Then turning on both <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> and <code>importHelpers</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">Object.defineProperty(exports, </span><span  style=\"color: #A31515\">\"__esModule\"</span><span  style=\"color: #000000\">, { value: </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\"> });</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> tslib_1 = require(</span><span  style=\"color: #A31515\">\"tslib\"</span><span  style=\"color: #000000\">);</span>\n<span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn(arr) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> arr2 = tslib_1.__spread([</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">], arr);</span>\n<span  style=\"color: #000000\">}</span>\n<span  style=\"color: #000000\">exports.fn = fn;</span></code></div></pre>\n<p>You can use <a href=\"#noEmitHelpers\"><code>noEmitHelpers</code></a> when you provide your own implementations of these functions.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>importHelpers<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listFiles'><a aria-label=\"Link to the compiler option:listFiles\" title=\"Link to the compiler option:listFiles\" href='#listFiles'>#</a> List Files - <code>listFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of files part of the compilation. This is useful when you are not sure that TypeScript has\nincluded a file you expected.</p>\n<p>For example:</p>\n<pre><code>example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>With:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"compilerOptions\"</span><span  style=\"color: #000000\">: {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"listFiles\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #0000FF\">true</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>Would echo paths like:</p>\n<pre><code>$ npm run tsc\npath/to/example/node_modules/typescript/lib/lib.d.ts\npath/to/example/node_modules/typescript/lib/lib.es5.d.ts\npath/to/example/node_modules/typescript/lib/lib.dom.d.ts\npath/to/example/node_modules/typescript/lib/lib.webworker.importscripts.d.ts\npath/to/example/node_modules/typescript/lib/lib.scripthost.d.ts\npath/to/example/index.ts\n</code></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>listFiles<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listEmittedFiles'><a aria-label=\"Link to the compiler option:listEmittedFiles\" title=\"Link to the compiler option:listEmittedFiles\" href='#listEmittedFiles'>#</a> List Emitted Files - <code>listEmittedFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of generated files part of the compilation.\nThis is useful when you want to use TypeScript as a part of a shell build chain.\nThis is useful when you are not sure that TypeScript has\nincluded a file you expected.</p>\n<p>For example:</p>\n<pre><code>example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>With:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"compilerOptions\"</span><span  style=\"color: #000000\">: {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"declaration\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\">,</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"listFiles\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #0000FF\">true</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>Would echo paths like:</p>\n<pre><code>$ npm run tsc\n\npath/to/example/index.js\npath/to/example/index.d.ts\n</code></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>listEmittedFiles<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='traceResolution'><a aria-label=\"Link to the compiler option:traceResolution\" title=\"Link to the compiler option:traceResolution\" href='#traceResolution'>#</a> Trace Resolution - <code>traceResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When you are trying to debug why a module isn’t being included you can enable <code>traceResolutions</code> to have TypeScript output text to the console as it resolves each file.\nYou can read more about this in <a href=\"/docs/handbook/module-resolution.html#tracing-module-resolution\">the handbook</a></p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>traceResolution<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_0.html\">2.0</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='diagnostics'><a aria-label=\"Link to the compiler option:diagnostics\" title=\"Link to the compiler option:diagnostics\" href='#diagnostics'>#</a> Diagnostics - <code>diagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Used to output diagnostic information for debugging</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>diagnostics<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Related</td><td>[`extendedDiagnostics`](#extendedDiagnostics)<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extendedDiagnostics'><a aria-label=\"Link to the compiler option:extendedDiagnostics\" title=\"Link to the compiler option:extendedDiagnostics\" href='#extendedDiagnostics'>#</a> Extended Diagnostics - <code>extendedDiagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You can use this flag to discover where TypeScript is spending it’s time when compiling.\nThis is a tool used for understanding the performance characteristics of your codebase overall.</p>\n<p>You can learn more about how to measure and understand the output in the performance <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">section of the wiki</a></p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>extendedDiagnostics<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Related</td><td>[`diagnostics`](#diagnostics)<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='generateCpuProfile'><a aria-label=\"Link to the compiler option:generateCpuProfile\" title=\"Link to the compiler option:generateCpuProfile\" href='#generateCpuProfile'>#</a> Generate CPU Profile - <code>generateCpuProfile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This option gives you the chance to have TypeScript emit a v8 CPU profile during the compiler run. The CPU profile can provide insight into why your builds may be slow.</p>\n<p>This option can only be used from the CLI via: <code>--generateCpuProfile tsc-output.cpuprofile</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span  style=\"color: #000000\">npm run tsc --generateCpuProfile tsc-output.cpuprofile</span></code></div></pre>\n<p>This file can be opened in a chromium based browser like Chrome or Edge Developer in <a href=\"https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution\">the CPU profiler</a> section.\nYou can learn more about understanding the compilers performance in the <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">TypeScript wiki section on performance</a></p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>generateCpuProfile<td/></tr>\n<tr><td>Default</td><td> profile.cpuprofile<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-3_7.html\">3.7</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='locale'><a aria-label=\"Link to the compiler option:locale\" title=\"Link to the compiler option:locale\" href='#locale'>#</a> Locale - <code>locale</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The locale used when displaying messages to the user (e.g. ‘en-us’)</p>\n<h3 id=\"locales-supported-as-of-typescript-37\"><a href=\"#locales-supported-as-of-typescript-37\" aria-label=\"locales supported as of typescript 37 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Locales supported as of TypeScript 3.7</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Locale</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Brazilian Portuguese</td>\n<td><code>pr-BR</code></td>\n</tr>\n<tr>\n<td>Chinese (Simplified)</td>\n<td><code>zh-TW</code></td>\n</tr>\n<tr>\n<td>Chinese (Traditional)</td>\n<td><code>zh-CN</code></td>\n</tr>\n<tr>\n<td>Czech</td>\n<td><code>cs-CZ</code></td>\n</tr>\n<tr>\n<td>English (US)</td>\n<td><code>en-US</code></td>\n</tr>\n<tr>\n<td>French</td>\n<td><code>fr-FR</code></td>\n</tr>\n<tr>\n<td>German</td>\n<td><code>de-DE</code></td>\n</tr>\n<tr>\n<td>Italian</td>\n<td><code>it-IT</code></td>\n</tr>\n<tr>\n<td>Japanese</td>\n<td><code>ja-JP</code></td>\n</tr>\n<tr>\n<td>Korean</td>\n<td><code>ko-KR</code></td>\n</tr>\n<tr>\n<td>Polish</td>\n<td><code>pl-PL</code></td>\n</tr>\n<tr>\n<td>Russian</td>\n<td><code>ru-RU</code></td>\n</tr>\n<tr>\n<td>Spanish</td>\n<td><code>es-ES</code></td>\n</tr>\n<tr>\n<td>Turkish</td>\n<td><code>tr-TR</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>locale<td/></tr>\n<tr><td>Default</td><td>Platform specific<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitDeclarationOnly'><a aria-label=\"Link to the compiler option:emitDeclarationOnly\" title=\"Link to the compiler option:emitDeclarationOnly\" href='#emitDeclarationOnly'>#</a> Emit Declaration Only - <code>emitDeclarationOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><em>Only</em> emit <code>.d.ts</code> files; do not emit <code>.js</code> files.</p>\n<p>This setting is useful in two cases:</p>\n<ul>\n<li>You are using a transpiler other than TypeScript to generate your JavaScript.</li>\n<li>You are using TypeScript to only generate d.ts files for your consumers.</li>\n</ul>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>emitDeclarationOnly<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_8.html\">2.8</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFactory'><a aria-label=\"Link to the compiler option:jsxFactory\" title=\"Link to the compiler option:jsxFactory\" href='#jsxFactory'>#</a> JSX Factory - <code>jsxFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Changes the function called in <code>.js</code> files when compiling JSX Elements.\nThe most common change is to use <code>\"h\"</code> or <code>\"preact.h\"</code> instead of the default <code>\"React.createElement\"</code> if using <code>preact</code>.</p>\n<p>This is the same as <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#custom\">Babel’s <code>/** @jsx h */</code> directive</a>.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>jsxFactory<td/></tr>\n<tr><td>Default</td><td>`React\"`<td/></tr>\n<tr><td>Allowed</td><td>**Allowed Values**: Any identifier or dotted identifier; default `\"React.createElement\"`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='resolveJsonModule'><a aria-label=\"Link to the compiler option:resolveJsonModule\" title=\"Link to the compiler option:resolveJsonModule\" href='#resolveJsonModule'>#</a> Resolve JSON Module - <code>resolveJsonModule</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Allows importing modules with a ‘.json’ extension, which is a common practice in node projects. This includes\ngenerating a type for the import based on the static JSON shape.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #008000\">// @filename: settings.json</span>\n<span class=\"error\"><span>Cannot find module './settings.json'.</span><span class=\"code\">2307</span></span><span class=\"error-behind\">Cannot find module './settings.json'.</span><span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #A31515\">\"repo\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #A31515\">\"TypeScript\"</span><span  style=\"color: #000000\">,</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #A31515\">\"dry\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #0000FF\">false</span><span  style=\"color: #000000\">,</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #A31515\">\"debug\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #0000FF\">false</span>\n<span  style=\"color: #000000\">}</span>\n<span  style=\"color: #008000\">// @filename: index.ts</span>\n<span  style=\"color: #0000FF\">import</span><span  style=\"color: #000000\"> settings </span><span  style=\"color: #0000FF\">from</span><span  style=\"color: #000000\"> </span><span  style=\"color: #A31515\">\"./settings.json\"</span><span  style=\"color: #000000\">;</span>\n\n<span  style=\"color: #000000\">settings.debug === </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">settings.dry === </span><span  style=\"color: #09835A\">2</span><span  style=\"color: #000000\">;</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>resolveJsonModule<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='out'><a aria-label=\"Link to the compiler option:out\" title=\"Link to the compiler option:out\" href='#out'>#</a> Out - <code>out</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#outfile\">outFile</a> instead.</p>\n<p>The <code>out</code> option computes the final file location in a way that is not predictable or consistent.\nThis option is retained for backward compatibility only.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>out<td/></tr>\n<tr><td>Status</td><td>Deprecated<td/></tr>\n<tr><td>Default</td><td>`n/a`<td/></tr>\n<tr><td>Related</td><td>[`outDir`](#outDir), [`outFile`](#outFile)<td/></tr>\n<tr><td>Status</td><td>Deprecated<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='reactNamespace'><a aria-label=\"Link to the compiler option:reactNamespace\" title=\"Link to the compiler option:reactNamespace\" href='#reactNamespace'>#</a> React Namespace - <code>reactNamespace</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#jsxFactory\"><code>--jsxFactory</code></a> instead. Specify the object invoked for createElement when targeting <code>react</code> for TSX files.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>reactNamespace<td/></tr>\n<tr><td>Default</td><td>`\"React\"`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipDefaultLibCheck'><a aria-label=\"Link to the compiler option:skipDefaultLibCheck\" title=\"Link to the compiler option:skipDefaultLibCheck\" href='#skipDefaultLibCheck'>#</a> Skip Default Lib Check - <code>skipDefaultLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#skipLibCheck\"><code>--skipLibCheck</code></a> instead. Skip type checking of default library declaration files.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>skipDefaultLibCheck<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='charset'><a aria-label=\"Link to the compiler option:charset\" title=\"Link to the compiler option:charset\" href='#charset'>#</a> Charset - <code>charset</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>In prior versions of TypeScript, this controlled what encoding was used when reading text files from disk.\nToday, TypeScript assumes UTF-8 encoding, but will correctly detect UTF-16 (BE and LE) or UTF-8 BOMs.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>charset<td/></tr>\n<tr><td>Status</td><td>Deprecated<td/></tr>\n<tr><td>Default</td><td>`utf8`<td/></tr>\n<tr><td>Status</td><td>Deprecated<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitBOM'><a aria-label=\"Link to the compiler option:emitBOM\" title=\"Link to the compiler option:emitBOM\" href='#emitBOM'>#</a> Emit BOM - <code>emitBOM</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Controls whether TypeScript will emit a <a href=\"https://en.wikipedia.org/wiki/Byte_order_mark\">byte order mark (BOM)</a> when writing output files.\nSome runtime environments require a BOM to correctly interpret a JavaScript files; others require that it is not present.\nThe default value of <code>false</code> is generally best unless you have a reason to change it.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>emitBOM<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='newLine'><a aria-label=\"Link to the compiler option:newLine\" title=\"Link to the compiler option:newLine\" href='#newLine'>#</a> New Line - <code>newLine</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the end of line sequence to be used when emitting files: ‘CRLF’ (dos) or ‘LF’ (unix).</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>newLine<td/></tr>\n<tr><td>Default</td><td>Platform specific<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-1_5.html\">1.5</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noErrorTruncation'><a aria-label=\"Link to the compiler option:noErrorTruncation\" title=\"Link to the compiler option:noErrorTruncation\" href='#noErrorTruncation'>#</a> No Error Truncation - <code>noErrorTruncation</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TODO: Declare deprecated?!</p>\n<p>Do not truncate error messages.</p>\n<p>With <code>false</code></p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> x: {</span>\n<span  style=\"color: #000000\">  propertyWithAnExceedinglyLongName1: string;</span>\n<span  style=\"color: #000000\">  propertyWithAnExceedinglyLongName2: string;</span>\n<span  style=\"color: #000000\">  propertyWithAnExceedinglyLongName3: string;</span>\n<span  style=\"color: #000000\">  propertyWithAnExceedinglyLongName4: string;</span>\n<span  style=\"color: #000000\">  propertyWithAnExceedinglyLongName5: string;</span>\n<span  style=\"color: #000000\">};</span>\n\n<span  style=\"color: #008000\">// String representation of type of 'x' should be truncated in error message</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> s: string = x;</span>\n<span class=\"error\"><span>Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span><span class=\"code\">2322<br/>2454</span></span><span class=\"error-behind\">Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span></code></div></pre>\n<br/>\n<br/>\n<br/>\n<p>With <code>true</code></p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> x: {</span>\n<span  style=\"color: #000000\">  propertyWithAnExceedinglyLongName1: string;</span>\n<span  style=\"color: #000000\">  propertyWithAnExceedinglyLongName2: string;</span>\n<span  style=\"color: #000000\">  propertyWithAnExceedinglyLongName3: string;</span>\n<span  style=\"color: #000000\">  propertyWithAnExceedinglyLongName4: string;</span>\n<span  style=\"color: #000000\">  propertyWithAnExceedinglyLongName5: string;</span>\n<span  style=\"color: #000000\">};</span>\n\n<span  style=\"color: #008000\">// String representation of type of 'x' should be truncated in error message</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> s: string = x;</span>\n<span class=\"error\"><span>Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span><span class=\"code\">2322<br/>2454</span></span><span class=\"error-behind\">Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>noErrorTruncation<td/></tr>\n<tr><td>Status</td><td>Deprecated<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Status</td><td>Deprecated<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noLib'><a aria-label=\"Link to the compiler option:noLib\" title=\"Link to the compiler option:noLib\" href='#noLib'>#</a> No Lib - <code>noLib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Disables the automatic inclusion of any library files.\nIf this option is set, <code>lib</code> is ignored.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>noLib<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noResolve'><a aria-label=\"Link to the compiler option:noResolve\" title=\"Link to the compiler option:noResolve\" href='#noResolve'>#</a> No Resolve - <code>noResolve</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default, TypeScript will examine the initial set of files for <code>import</code> and <code>&#x3C;reference</code> directives and add these resolved files to your program.</p>\n<p>If <code>noResolve</code> isn’t set, this process doesn’t happen.\nHowever, <code>import</code> statements are still checked to see if they resolve to a valid module, so you’ll need to make sure this is satisfied by some other means.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>noResolve<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='stripInternal'><a aria-label=\"Link to the compiler option:stripInternal\" title=\"Link to the compiler option:stripInternal\" href='#stripInternal'>#</a> Strip Internal - <code>stripInternal</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit declarations for code that has an ‘@internal’ annotation. This is an internal compiler option, which is\nused at your own risk because the compiler does not check that the result is valid. If you are searching for a tool to\nhandle additional levels of visibility within your d.ts files, look at <a href=\"https://api-extractor.com\">api-extractor</a>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #008000\">/**</span>\n<span  style=\"color: #008000\"> * Days available in a week</span>\n<span  style=\"color: #008000\"> * @internal</span>\n<span  style=\"color: #008000\"> */</span>\n<span  style=\"color: #0000FF\">export</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> daysInAWeek = </span><span  style=\"color: #09835A\">7</span><span  style=\"color: #000000\">;</span>\n\n<span  style=\"color: #008000\">/** Gets the  */</span>\n<span  style=\"color: #0000FF\">export</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> weeklySalary(dayRate: number) {</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> daysInAWeek * dayRate;</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>With the flag disabled as default:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #008000\">/**</span>\n<span  style=\"color: #008000\"> * Days available in a week</span>\n<span  style=\"color: #008000\"> * @internal</span>\n<span  style=\"color: #008000\"> */</span>\n<span  style=\"color: #0000FF\">export</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">declare</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> daysInAWeek = </span><span  style=\"color: #09835A\">7</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #008000\">/** Gets the  */</span>\n<span  style=\"color: #0000FF\">export</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">declare</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> weeklySalary(dayRate: number): number;</span></code></div></pre>\n<p>Turning on <code>stripInternal</code> will emit a redacted <code>d.ts</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #008000\">/** Gets the  */</span>\n<span  style=\"color: #0000FF\">export</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">declare</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> weeklySalary(dayRate: number): number;</span></code></div></pre>\n<p>The JavaScript is still the same.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>stripInternal<td/></tr>\n<tr><td>Status</td><td>internal<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSizeLimit'><a aria-label=\"Link to the compiler option:disableSizeLimit\" title=\"Link to the compiler option:disableSizeLimit\" href='#disableSizeLimit'>#</a> Disable Size Limit - <code>disableSizeLimit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>To avoid a possible memory bloat issue when working with very large JavaScript projects, there is an upper limit to the amount of memory TypeScript will allocate. Turning this flag on will remove the limit.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>disableSizeLimit<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSourceOfProjectReferenceRedirect'><a aria-label=\"Link to the compiler option:disableSourceOfProjectReferenceRedirect\" title=\"Link to the compiler option:disableSourceOfProjectReferenceRedirect\" href='#disableSourceOfProjectReferenceRedirect'>#</a> Disable Source Project Reference Redirect - <code>disableSourceOfProjectReferenceRedirect</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When working with <a href=\"/docs/handbook/project-references.html\">composite TypeScript projects</a>, this option provides a way to go <a href=\"/docs/handbook/release-notes/typescript-3-7.html#build-free-editing-with-project-references\">back to the pre-3.7</a> behavior where d.ts files were used to as the boundaries between modules.\nIn 3.7 the source for truth is now your TypeScript files.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>disableSourceOfProjectReferenceRedirect<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-3_7.html\">3.7</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitUseStrict'><a aria-label=\"Link to the compiler option:noImplicitUseStrict\" title=\"Link to the compiler option:noImplicitUseStrict\" href='#noImplicitUseStrict'>#</a> No Implicit Use Strict - <code>noImplicitUseStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You shouldn’t need this. By default, when emitting a module file to a non-ES6 target, TypeScript emits a <code>\"use strict\";</code> prologue at the top of the file.\nThis setting disables that.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #000000\">define([</span><span  style=\"color: #A31515\">\"require\"</span><span  style=\"color: #000000\">, </span><span  style=\"color: #A31515\">\"exports\"</span><span  style=\"color: #000000\">], </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> (require, exports) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">    exports.__esModule = </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn() { }</span>\n<span  style=\"color: #000000\">    exports.fn = fn;</span>\n<span  style=\"color: #000000\">});</span></code></div></pre>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #000000\">define([</span><span  style=\"color: #A31515\">\"require\"</span><span  style=\"color: #000000\">, </span><span  style=\"color: #A31515\">\"exports\"</span><span  style=\"color: #000000\">], </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> (require, exports) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">    exports.__esModule = </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn() { }</span>\n<span  style=\"color: #000000\">    exports.fn = fn;</span>\n<span  style=\"color: #000000\">});</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>noImplicitUseStrict<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitHelpers'><a aria-label=\"Link to the compiler option:noEmitHelpers\" title=\"Link to the compiler option:noEmitHelpers\" href='#noEmitHelpers'>#</a> No Emit Helpers - <code>noEmitHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Instead of importing helpers with <a href=\"#importHelpers\"><code>importHelpers</code></a>, you can provide implementations in the global scope for the helpers you use and completely turn off emitting of helper functions.</p>\n<p>For example, using this <code>async</code> function in ES5 requires a <code>await</code>-like function and <code>generator</code>-like function to run:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> getAPI = </span><span  style=\"color: #0000FF\">async</span><span  style=\"color: #000000\"> (url: string) </span><span  style=\"color: #0000FF\">=&gt;</span><span  style=\"color: #000000\"> {</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #008000\">// Get API</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> {};</span>\n<span  style=\"color: #000000\">};</span></code></div></pre>\n<p>Which creates quite a lot of JavaScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> __awaiter = (</span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\"> && </span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\">.__awaiter) || </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> (thisArg, _arguments, P, generator) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> adopt(value) { </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> value </span><span  style=\"color: #0000FF\">instanceof</span><span  style=\"color: #000000\"> P ? value : </span><span  style=\"color: #0000FF\">new</span><span  style=\"color: #000000\"> P(</span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> (resolve) { resolve(value); }); }</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">new</span><span  style=\"color: #000000\"> (P || (P = Promise))(</span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> (resolve, reject) {</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fulfilled(value) { </span><span  style=\"color: #0000FF\">try</span><span  style=\"color: #000000\"> { step(generator.next(value)); } </span><span  style=\"color: #0000FF\">catch</span><span  style=\"color: #000000\"> (e) { reject(e); } }</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> rejected(value) { </span><span  style=\"color: #0000FF\">try</span><span  style=\"color: #000000\"> { step(generator[</span><span  style=\"color: #A31515\">\"throw\"</span><span  style=\"color: #000000\">](value)); } </span><span  style=\"color: #0000FF\">catch</span><span  style=\"color: #000000\"> (e) { reject(e); } }</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }</span>\n<span  style=\"color: #000000\">        step((generator = generator.apply(thisArg, _arguments || [])).next());</span>\n<span  style=\"color: #000000\">    });</span>\n<span  style=\"color: #000000\">};</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> __generator = (</span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\"> && </span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\">.__generator) || </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> (thisArg, body) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> _ = { label: </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">, sent: </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\">() { </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (t[</span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">] & </span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">) </span><span  style=\"color: #0000FF\">throw</span><span  style=\"color: #000000\"> t[</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">]; </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> t[</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">]; }, trys: [], ops: [] }, f, y, t, g;</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> g = { next: verb(</span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">), </span><span  style=\"color: #A31515\">\"throw\"</span><span  style=\"color: #000000\">: verb(</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">), </span><span  style=\"color: #A31515\">\"return\"</span><span  style=\"color: #000000\">: verb(</span><span  style=\"color: #09835A\">2</span><span  style=\"color: #000000\">) }, </span><span  style=\"color: #0000FF\">typeof</span><span  style=\"color: #000000\"> Symbol === </span><span  style=\"color: #A31515\">\"function\"</span><span  style=\"color: #000000\"> && (g[Symbol.iterator] = </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\">() { </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\">; }), g;</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> verb(n) { </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> (v) { </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> step([n, v]); }; }</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> step(op) {</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (f) </span><span  style=\"color: #0000FF\">throw</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">new</span><span  style=\"color: #000000\"> TypeError(</span><span  style=\"color: #A31515\">\"Generator is already executing.\"</span><span  style=\"color: #000000\">);</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #0000FF\">while</span><span  style=\"color: #000000\"> (_) </span><span  style=\"color: #0000FF\">try</span><span  style=\"color: #000000\"> {</span>\n<span  style=\"color: #000000\">            </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (f = </span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">, y && (t = op[</span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">] & </span><span  style=\"color: #09835A\">2</span><span  style=\"color: #000000\"> ? y[</span><span  style=\"color: #A31515\">\"return\"</span><span  style=\"color: #000000\">] : op[</span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">] ? y[</span><span  style=\"color: #A31515\">\"throw\"</span><span  style=\"color: #000000\">] || ((t = y[</span><span  style=\"color: #A31515\">\"return\"</span><span  style=\"color: #000000\">]) && t.call(y), </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">) : y.next) && !(t = t.call(y, op[</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">])).done) </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> t;</span>\n<span  style=\"color: #000000\">            </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (y = </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">, t) op = [op[</span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">] & </span><span  style=\"color: #09835A\">2</span><span  style=\"color: #000000\">, t.value];</span>\n<span  style=\"color: #000000\">            </span><span  style=\"color: #0000FF\">switch</span><span  style=\"color: #000000\"> (op[</span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">]) {</span>\n<span  style=\"color: #000000\">                </span><span  style=\"color: #0000FF\">case</span><span  style=\"color: #000000\"> </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">: </span><span  style=\"color: #0000FF\">case</span><span  style=\"color: #000000\"> </span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">: t = op; </span><span  style=\"color: #0000FF\">break</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">                </span><span  style=\"color: #0000FF\">case</span><span  style=\"color: #000000\"> </span><span  style=\"color: #09835A\">4</span><span  style=\"color: #000000\">: _.label++; </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> { value: op[</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">], done: </span><span  style=\"color: #0000FF\">false</span><span  style=\"color: #000000\"> };</span>\n<span  style=\"color: #000000\">                </span><span  style=\"color: #0000FF\">case</span><span  style=\"color: #000000\"> </span><span  style=\"color: #09835A\">5</span><span  style=\"color: #000000\">: _.label++; y = op[</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">]; op = [</span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">]; </span><span  style=\"color: #0000FF\">continue</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">                </span><span  style=\"color: #0000FF\">case</span><span  style=\"color: #000000\"> </span><span  style=\"color: #09835A\">7</span><span  style=\"color: #000000\">: op = _.ops.pop(); _.trys.pop(); </span><span  style=\"color: #0000FF\">continue</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">                </span><span  style=\"color: #0000FF\">default</span><span  style=\"color: #000000\">:</span>\n<span  style=\"color: #000000\">                    </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (!(t = _.trys, t = t.length &gt; </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\"> && t[t.length - </span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">]) && (op[</span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">] === </span><span  style=\"color: #09835A\">6</span><span  style=\"color: #000000\"> || op[</span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">] === </span><span  style=\"color: #09835A\">2</span><span  style=\"color: #000000\">)) { _ = </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">; </span><span  style=\"color: #0000FF\">continue</span><span  style=\"color: #000000\">; }</span>\n<span  style=\"color: #000000\">                    </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (op[</span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">] === </span><span  style=\"color: #09835A\">3</span><span  style=\"color: #000000\"> && (!t || (op[</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">] &gt; t[</span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">] && op[</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">] &lt; t[</span><span  style=\"color: #09835A\">3</span><span  style=\"color: #000000\">]))) { _.label = op[</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">]; </span><span  style=\"color: #0000FF\">break</span><span  style=\"color: #000000\">; }</span>\n<span  style=\"color: #000000\">                    </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (op[</span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">] === </span><span  style=\"color: #09835A\">6</span><span  style=\"color: #000000\"> && _.label &lt; t[</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">]) { _.label = t[</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">]; t = op; </span><span  style=\"color: #0000FF\">break</span><span  style=\"color: #000000\">; }</span>\n<span  style=\"color: #000000\">                    </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (t && _.label &lt; t[</span><span  style=\"color: #09835A\">2</span><span  style=\"color: #000000\">]) { _.label = t[</span><span  style=\"color: #09835A\">2</span><span  style=\"color: #000000\">]; _.ops.push(op); </span><span  style=\"color: #0000FF\">break</span><span  style=\"color: #000000\">; }</span>\n<span  style=\"color: #000000\">                    </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (t[</span><span  style=\"color: #09835A\">2</span><span  style=\"color: #000000\">]) _.ops.pop();</span>\n<span  style=\"color: #000000\">                    _.trys.pop(); </span><span  style=\"color: #0000FF\">continue</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">            }</span>\n<span  style=\"color: #000000\">            op = body.call(thisArg, _);</span>\n<span  style=\"color: #000000\">        } </span><span  style=\"color: #0000FF\">catch</span><span  style=\"color: #000000\"> (e) { op = [</span><span  style=\"color: #09835A\">6</span><span  style=\"color: #000000\">, e]; y = </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">; } </span><span  style=\"color: #0000FF\">finally</span><span  style=\"color: #000000\"> { f = t = </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">; }</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (op[</span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">] & </span><span  style=\"color: #09835A\">5</span><span  style=\"color: #000000\">) </span><span  style=\"color: #0000FF\">throw</span><span  style=\"color: #000000\"> op[</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">]; </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> { value: op[</span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">] ? op[</span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">] : </span><span  style=\"color: #0000FF\">void</span><span  style=\"color: #000000\"> </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">, done: </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\"> };</span>\n<span  style=\"color: #000000\">    }</span>\n<span  style=\"color: #000000\">};</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> getAPI = </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> (url) { </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> __awaiter(</span><span  style=\"color: #0000FF\">void</span><span  style=\"color: #000000\"> </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">, </span><span  style=\"color: #0000FF\">void</span><span  style=\"color: #000000\"> </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">, </span><span  style=\"color: #0000FF\">void</span><span  style=\"color: #000000\"> </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">, </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> () {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> __generator(</span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\">, </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> (_a) {</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #008000\">// Get API</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> [</span><span  style=\"color: #09835A\">2</span><span  style=\"color: #000000\"> </span><span  style=\"color: #008000\">/*return*/</span><span  style=\"color: #000000\">, {}];</span>\n<span  style=\"color: #000000\">    });</span>\n<span  style=\"color: #000000\">}); };</span></code></div></pre>\n<p>Which can be switched out with your own globals via this flag:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> getAPI = </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> (url) { </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> __awaiter(</span><span  style=\"color: #0000FF\">void</span><span  style=\"color: #000000\"> </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">, </span><span  style=\"color: #0000FF\">void</span><span  style=\"color: #000000\"> </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">, </span><span  style=\"color: #0000FF\">void</span><span  style=\"color: #000000\"> </span><span  style=\"color: #09835A\">0</span><span  style=\"color: #000000\">, </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> () {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> __generator(</span><span  style=\"color: #0000FF\">this</span><span  style=\"color: #000000\">, </span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> (_a) {</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #008000\">// Get API</span>\n<span  style=\"color: #000000\">        </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> [</span><span  style=\"color: #09835A\">2</span><span  style=\"color: #000000\"> </span><span  style=\"color: #008000\">/*return*/</span><span  style=\"color: #000000\">, {}];</span>\n<span  style=\"color: #000000\">    });</span>\n<span  style=\"color: #000000\">}); };</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>noEmitHelpers<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Related</td><td>[`importHelpers`](#importHelpers)<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-1_5.html\">1.5</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitOnError'><a aria-label=\"Link to the compiler option:noEmitOnError\" title=\"Link to the compiler option:noEmitOnError\" href='#noEmitOnError'>#</a> No Emit On Error - <code>noEmitOnError</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.</p>\n<p>This defaults to <code>false</code>, making it easier to work with a TypeScript in a watch-like environment where you may want to see results of changes to your code in another environment before making sure all errors are resolved.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>noEmitOnError<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-1_4.html\">1.4</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveConstEnums'><a aria-label=\"Link to the compiler option:preserveConstEnums\" title=\"Link to the compiler option:preserveConstEnums\" href='#preserveConstEnums'>#</a> Preserve Const Enums - <code>preserveConstEnums</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not erase const enum declarations in generated code. <code>const enum</code>s provide a way to reduce the overall memory footprint\nof your application at runtime, by swapping the reference to the enum value with the value in the code.</p>\n<p>For example with this TypeScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">enum</span><span  style=\"color: #000000\"> Album {</span>\n<span  style=\"color: #000000\">  JimmyEatWorldFutures = </span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">,</span>\n<span  style=\"color: #000000\">  TubRingZooHypothesis = </span><span  style=\"color: #09835A\">2</span><span  style=\"color: #000000\">,</span>\n<span  style=\"color: #000000\">  DogFashionDiscoAdultery = </span><span  style=\"color: #09835A\">3</span>\n<span  style=\"color: #000000\">}</span>\n\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> selectedAlbum = Album.JimmyEatWorldFutures;</span>\n<span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (selectedAlbum === Album.JimmyEatWorldFutures) {</span>\n<span  style=\"color: #000000\">  console.log(</span><span  style=\"color: #A31515\">\"That is a great choice.\"</span><span  style=\"color: #000000\">);</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>The default <code>const enum</code> behavior is to convert any <code>Album.Something</code> to the number literal, and to remove a reference\nto the enum from the JavaScript completely.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> selectedAlbum = </span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\"> </span><span  style=\"color: #008000\">/* JimmyEatWorldFutures */</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (selectedAlbum === </span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\"> </span><span  style=\"color: #008000\">/* JimmyEatWorldFutures */</span><span  style=\"color: #000000\">) {</span>\n<span  style=\"color: #000000\">    console.log(</span><span  style=\"color: #A31515\">\"That is a great choice.\"</span><span  style=\"color: #000000\">);</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>With <code>preserveConstEnums</code> set to <code>true</code>, the enum exists at runtime and the numbers are still switched.</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span  style=\"color: #A31515\">\"use strict\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #0000FF\">var</span><span  style=\"color: #000000\"> Album;</span>\n<span  style=\"color: #000000\">(</span><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> (Album) {</span>\n<span  style=\"color: #000000\">    Album[Album[</span><span  style=\"color: #A31515\">\"JimmyEatWorldFutures\"</span><span  style=\"color: #000000\">] = </span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">] = </span><span  style=\"color: #A31515\">\"JimmyEatWorldFutures\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">    Album[Album[</span><span  style=\"color: #A31515\">\"TubRingZooHypothesis\"</span><span  style=\"color: #000000\">] = </span><span  style=\"color: #09835A\">2</span><span  style=\"color: #000000\">] = </span><span  style=\"color: #A31515\">\"TubRingZooHypothesis\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">    Album[Album[</span><span  style=\"color: #A31515\">\"DogFashionDiscoAdultery\"</span><span  style=\"color: #000000\">] = </span><span  style=\"color: #09835A\">3</span><span  style=\"color: #000000\">] = </span><span  style=\"color: #A31515\">\"DogFashionDiscoAdultery\"</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">})(Album || (Album = {}));</span>\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> selectedAlbum = </span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\"> </span><span  style=\"color: #008000\">/* JimmyEatWorldFutures */</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (selectedAlbum === </span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\"> </span><span  style=\"color: #008000\">/* JimmyEatWorldFutures */</span><span  style=\"color: #000000\">) {</span>\n<span  style=\"color: #000000\">    console.log(</span><span  style=\"color: #A31515\">\"That is a great choice.\"</span><span  style=\"color: #000000\">);</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>preserveConstEnums<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationDir'><a aria-label=\"Link to the compiler option:declarationDir\" title=\"Link to the compiler option:declarationDir\" href='#declarationDir'>#</a> Declaration Dir - <code>declarationDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Let’s you change the root directory for where declaration files to be written.</p>\n<pre><code>example\n├── index.ts\n├── package.json\n└── tsconfig.json\n</code></pre>\n<p>with this <code>tsconfig.json</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span  style=\"color: #000000\">{</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0451A5\">\"compilerOptions\"</span><span  style=\"color: #000000\">: {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"declaration\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\">,</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0451A5\">\"declarationDir\"</span><span  style=\"color: #000000\">: </span><span  style=\"color: #A31515\">\"./types\"</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>Would place the d.ts for the <code>index.ts</code> in a folder <code>types</code>:</p>\n<pre><code>example\n├── index.js\n├── index.ts\n├── package.json\n├── tsconfig.json\n└── types\n    └── index.d.ts\n</code></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>declarationDir<td/></tr>\n<tr><td>Default</td><td> n/a<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_0.html\">2.0</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipLibCheck'><a aria-label=\"Link to the compiler option:skipLibCheck\" title=\"Link to the compiler option:skipLibCheck\" href='#skipLibCheck'>#</a> Skip Lib Check - <code>skipLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Skip type checking of declaration files.</p>\n<p>This can save time in a compilation at the expense of accuracy in your type system. For example, two libraries could\ndefine two copies of the same <code>type</code> in an inconsistent way. Rather than doing a full check of all d.ts files, TypeScript\nwill type check the code you specifically refer to in your app’s source code.</p>\n<p>A common case where someone might think to use <code>skipLibCheck</code> is when there are two copies of a library’s types in\nyour node_modules. In those cases, you should instead consider using a feature like <a href=\"https://yarnpkg.com/lang/en/docs/selective-version-resolutions/\">yarn’s resolutions</a>\nto ensure there is only one copy of that dependency in your dependency tree or investigate how to ensure there is\nonly one copy by understanding the dependency resolution to get there without additional tooling.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>skipLibCheck<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_0.html\">2.0</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUnusedLabels'><a aria-label=\"Link to the compiler option:allowUnusedLabels\" title=\"Link to the compiler option:allowUnusedLabels\" href='#allowUnusedLabels'>#</a> Allow Unused Labels - <code>allowUnusedLabels</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Set to false to disable warnings about unused labels.</p>\n<p>Labels are very rare in JavaScript and typically indicate an attempt to write an object literal:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #008000\">// @allowUnusedLabels: false</span>\n<span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> verifyAge(age: number) {</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #008000\">// Forgot 'return' statement!</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (age &gt; </span><span  style=\"color: #09835A\">18</span><span  style=\"color: #000000\">) {</span>\n<span  style=\"color: #000000\">    verified: </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>allowUnusedLabels<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-1_8.html\">1.8</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUnreachableCode'><a aria-label=\"Link to the compiler option:allowUnreachableCode\" title=\"Link to the compiler option:allowUnreachableCode\" href='#allowUnreachableCode'>#</a> Allow Unreachable Code - <code>allowUnreachableCode</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Set to false to disable warnings about unreachable code.\nThese warnings are only about code which is provably unreachable due to the use of JavaScript syntax, for example:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn(n: number) {</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (n &gt; </span><span  style=\"color: #09835A\">5</span><span  style=\"color: #000000\">) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">  } </span><span  style=\"color: #0000FF\">else</span><span  style=\"color: #000000\"> {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">false</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">}</span></code></div></pre>\n<p>With <code>\"allowUnreachableCode\": false</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">function</span><span  style=\"color: #000000\"> fn(n: number) {</span>\n<span  style=\"color: #000000\">  </span><span  style=\"color: #0000FF\">if</span><span  style=\"color: #000000\"> (n &gt; </span><span  style=\"color: #09835A\">5</span><span  style=\"color: #000000\">) {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">true</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">  } </span><span  style=\"color: #0000FF\">else</span><span  style=\"color: #000000\"> {</span>\n<span  style=\"color: #000000\">    </span><span  style=\"color: #0000FF\">return</span><span  style=\"color: #000000\"> </span><span  style=\"color: #0000FF\">false</span><span  style=\"color: #000000\">;</span>\n<span  style=\"color: #000000\">  }</span>\n<span  style=\"color: #000000\">  </span><span class = 'err' style=\"color: #0000FF\">return</span><span class = 'err' style=\"color: #000000\"> </span><span class = 'err' style=\"color: #0000FF\">true</span><span class = 'err' style=\"color: #000000\">;</span>\n<span class=\"error\"><span>Unreachable code detected.</span><span class=\"code\">7027</span></span><span class=\"error-behind\">Unreachable code detected.</span><span  style=\"color: #000000\">}</span></code></div></pre>\n<p>This does not affect errors on the basis of code which <em>appears</em> to be unreachable due to type analysis.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>allowUnreachableCode<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-1_8.html\">1.8</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressExcessPropertyErrors'><a aria-label=\"Link to the compiler option:suppressExcessPropertyErrors\" title=\"Link to the compiler option:suppressExcessPropertyErrors\" href='#suppressExcessPropertyErrors'>#</a> Suppress Excess Property Errors - <code>suppressExcessPropertyErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<blockquote>\n<p>❌ <strong>Discouraged:</strong> This flag is provided for backward compatibility. Consider using <code>@ts-ignore</code> instead.</p>\n</blockquote>\n<p>This disables reporting of excess property errors, such as the one shown in the following example</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">type</span><span  style=\"color: #000000\"> Point = { x: number; y: number };</span>\n<span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> p: Point = { x: </span><span  style=\"color: #09835A\">1</span><span  style=\"color: #000000\">, y: </span><span  style=\"color: #09835A\">3</span><span  style=\"color: #000000\">, m: </span><span  style=\"color: #09835A\">10</span><span  style=\"color: #000000\"> };</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>suppressExcessPropertyErrors<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressImplicitAnyIndexErrors'><a aria-label=\"Link to the compiler option:suppressImplicitAnyIndexErrors\" title=\"Link to the compiler option:suppressImplicitAnyIndexErrors\" href='#suppressImplicitAnyIndexErrors'>#</a> Suppress Implicit Any Index Errors - <code>suppressImplicitAnyIndexErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This disables the reporting of implicit <code>any</code> warnings when indexing into objects, when <code>noImplicitAny</code> is enabled as shown in the following example:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> obj = { x: </span><span  style=\"color: #09835A\">10</span><span  style=\"color: #000000\"> };</span>\n<span  style=\"color: #000000\">console.log(obj[</span><span class = 'err' style=\"color: #A31515\">\"foo\"</span><span  style=\"color: #000000\">]);</span>\n<span class=\"error\"><span>Element implicitly has an 'any' type because expression of type '\"foo\"' can't be used to index type '{ x: number; }'.\n  Property 'foo' does not exist on type '{ x: number; }'.</span><span class=\"code\">7053</span></span><span class=\"error-behind\">Element implicitly has an 'any' type because expression of type '\"foo\"' can't be used to index type '{ x: number; }'.\n  Property 'foo' does not exist on type '{ x: number; }'.</span></code></div></pre>\n<p>Using <code>suppressImplicitAnyIndexErrors</code> is quite a drastic approach, it is recommended that you consider using a <code>@ts-ignore</code> instead:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span  style=\"color: #0000FF\">const</span><span  style=\"color: #000000\"> obj = { x: </span><span  style=\"color: #09835A\">10</span><span  style=\"color: #000000\"> };</span>\n<span  style=\"color: #008000\">// @ts-ignore</span>\n<span  style=\"color: #000000\">console.log(obj[</span><span  style=\"color: #A31515\">\"foo\"</span><span  style=\"color: #000000\">]);</span></code></div></pre>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>suppressImplicitAnyIndexErrors<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='forceConsistentCasingInFileNames'><a aria-label=\"Link to the compiler option:forceConsistentCasingInFileNames\" title=\"Link to the compiler option:forceConsistentCasingInFileNames\" href='#forceConsistentCasingInFileNames'>#</a> Force Consistent Casing In File Names - <code>forceConsistentCasingInFileNames</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript follows the case sensitivity rules of the file system it’s running on.\nThis can be problematic if some developers are working in a case-sensitive file system and others aren’t.\nIf a file attempts to import <code>fileManager.ts</code> by specifying <code>./FileManager.ts</code> the file will be found in a case-insensitive file system, but not on a case-sensitive file system.</p>\n<p>When this option is set, TypeScript will issue an error if a program tries to include a file by a casing different from the casing on disk.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>forceConsistentCasingInFileNames<td/></tr>\n<tr><td>Recommended</td><td>True<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='maxNodeModuleJsDepth'><a aria-label=\"Link to the compiler option:maxNodeModuleJsDepth\" title=\"Link to the compiler option:maxNodeModuleJsDepth\" href='#maxNodeModuleJsDepth'>#</a> Max Node Module JS Depth - <code>maxNodeModuleJsDepth</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The maximum dependency depth to search under node_modules and load JavaScript files.</p>\n<p>This flag is can only be used when <a href=\"#allowJs\"><code>allowJs</code></a> is enabled, and is used if you want to have TypeScript infer types for all of the JavaScript inside your node_modules.</p>\n<p>Ideally this should stay at 0 (the default), and <code>d.ts</code> files should be used to explicitly define the shape of modules.\nHowever, there are a cases where you may want to turn this on at the expense of speed and potential accuracy.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>maxNodeModuleJsDepth<td/></tr>\n<tr><td>Default</td><td>`0`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noStrictGenericChecks'><a aria-label=\"Link to the compiler option:noStrictGenericChecks\" title=\"Link to the compiler option:noStrictGenericChecks\" href='#noStrictGenericChecks'>#</a> No Strict Generic Checks - <code>noStrictGenericChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Disable strict checking of generic signatures in function types.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>noStrictGenericChecks<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='useDefineForClassFields'><a aria-label=\"Link to the compiler option:useDefineForClassFields\" title=\"Link to the compiler option:useDefineForClassFields\" href='#useDefineForClassFields'>#</a> Use Define For Class Fields - <code>useDefineForClassFields</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This flag is used as a part of migrating to the upcoming standard version of how class fields works. TypeScript introduced class fields many years before it was ratified in TC39. The latest version of the upcoming specification has a different runtime behavior to TypeScript’s implementation but the same syntax.</p>\n<p>This flag switches to the upcoming ECMA runtime behavior.</p>\n<p>You can read more about the transition in <a href=\"/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier\">the 3.7 release notes</a>.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>useDefineForClassFields<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-3_7.html\">3.7</a><td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='keyofStringsOnly'><a aria-label=\"Link to the compiler option:keyofStringsOnly\" title=\"Link to the compiler option:keyofStringsOnly\" href='#keyofStringsOnly'>#</a> Keyof Strings Only - <code>keyofStringsOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This flag changes the <code>keyof</code> type operator to return <code>string</code> instead of <code>string | number</code> when applied to a type with a string index signature.</p>\n<p>This flag is used to help people keep this behavior from <a href=\"/docs/handbook/release-notes/typescript-2-9.html#support-number-and-symbol-named-properties-with-keyof-and-mapped-types\">before TypeScript 2.9’s release</a>.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>keyofStringsOnly<td/></tr>\n<tr><td>Status</td><td>Deprecated<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Status</td><td>Deprecated<td/></tr>\n<tr><td>Released</td><td><a href=\"/docs/handbook/release-notes/typescript-2_9.html\">2.9</a><td/></tr></table>\n</div></section>\n<h2 id='Command_line_Options_6171'><a href='#Command_line_Options_6171'>#</a> Command Line</h2>\n<section class='compiler-option'>\n<h3 id='preserveWatchOutput'><a aria-label=\"Link to the compiler option:preserveWatchOutput\" title=\"Link to the compiler option:preserveWatchOutput\" href='#preserveWatchOutput'>#</a> Preserve Watch Output - <code>preserveWatchOutput</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Whether to keep outdated console output in watch mode instead of clearing the screen every time a change happened.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>preserveWatchOutput<td/></tr>\n<tr><td>Default</td><td>`false`<td/></tr>\n<tr><td>Status</td><td>internal<td/></tr></table>\n</div></section>\n<section class='compiler-option'>\n<h3 id='pretty'><a aria-label=\"Link to the compiler option:pretty\" title=\"Link to the compiler option:pretty\" href='#pretty'>#</a> Pretty - <code>pretty</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Stylize errors and messages using color and context, this is on by default - offer you a chance to have less terse,\nsingle colored messages from the compiler.</p>\n</div>\n<table class='compiler-option-md'><tr><th /><th /></tr><tr><td>Flag</td><td>pretty<td/></tr>\n<tr><td>Default</td><td>`true`<td/></tr></table>\n</div></section>","frontmatter":{"permalink":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tsconfigMDPath":"/home/runner/work/TypeScript-Website/TypeScript-Website/v2/packages/tsconfig-reference/output/en.md"}}}